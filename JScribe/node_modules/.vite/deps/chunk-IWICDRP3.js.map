{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/fortran.js"],
  "sourcesContent": ["function words(array) {\r\n  var keys = {};\r\n  for (var i = 0; i < array.length; ++i) {\r\n    keys[array[i]] = true;\r\n  }\r\n  return keys;\r\n}\r\n\r\nvar keywords = words([\r\n  \"abstract\", \"accept\", \"allocatable\", \"allocate\",\r\n  \"array\", \"assign\", \"asynchronous\", \"backspace\",\r\n  \"bind\", \"block\", \"byte\", \"call\", \"case\",\r\n  \"class\", \"close\", \"common\", \"contains\",\r\n  \"continue\", \"cycle\", \"data\", \"deallocate\",\r\n  \"decode\", \"deferred\", \"dimension\", \"do\",\r\n  \"elemental\", \"else\", \"encode\", \"end\",\r\n  \"endif\", \"entry\", \"enumerator\", \"equivalence\",\r\n  \"exit\", \"external\", \"extrinsic\", \"final\",\r\n  \"forall\", \"format\", \"function\", \"generic\",\r\n  \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\",\r\n  \"inquire\", \"intent\", \"interface\", \"intrinsic\",\r\n  \"module\", \"namelist\", \"non_intrinsic\",\r\n  \"non_overridable\", \"none\", \"nopass\",\r\n  \"nullify\", \"open\", \"optional\", \"options\",\r\n  \"parameter\", \"pass\", \"pause\", \"pointer\",\r\n  \"print\", \"private\", \"program\", \"protected\",\r\n  \"public\", \"pure\", \"read\", \"recursive\", \"result\",\r\n  \"return\", \"rewind\", \"save\", \"select\", \"sequence\",\r\n  \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\",\r\n  \"use\", \"value\", \"volatile\", \"where\", \"while\",\r\n  \"write\"]);\r\nvar builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\",\r\n                      \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\",\r\n                      \"all\", \"allocated\", \"alog\", \"amax\", \"amin\",\r\n                      \"amod\", \"and\", \"anint\", \"any\", \"asin\",\r\n                      \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\",\r\n                      \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\",\r\n                      \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\",\r\n                      \"clog\", \"cmplx\", \"command_argument_count\",\r\n                      \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\",\r\n                      \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\",\r\n                      \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\",\r\n                      \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\",\r\n                      \"c_alert\", \"c_backspace\", \"c_form_feed\",\r\n                      \"c_new_line\", \"c_carriage_return\",\r\n                      \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\",\r\n                      \"dacos\", \"dasin\", \"datan\", \"date_and_time\",\r\n                      \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\",\r\n                      \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\",\r\n                      \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\",\r\n                      \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\",\r\n                      \"dot_product\", \"dprod\", \"dsign\", \"dsinh\",\r\n                      \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\",\r\n                      \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\",\r\n                      \"exit\", \"exp\", \"exponent\", \"extends_type_of\",\r\n                      \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\",\r\n                      \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\",\r\n                      \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\",\r\n                      \"get_command\", \"get_command_argument\",\r\n                      \"get_environment_variable\", \"getcwd\",\r\n                      \"getenv\", \"getgid\", \"getlog\", \"getpid\",\r\n                      \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\",\r\n                      \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\",\r\n                      \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\",\r\n                      \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\",\r\n                      \"imagpart\", \"index\", \"int\", \"ior\", \"irand\",\r\n                      \"isatty\", \"ishft\", \"ishftc\", \"isign\",\r\n                      \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\",\r\n                      \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\",\r\n                      \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\",\r\n                      \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\",\r\n                      \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\",\r\n                      \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\",\r\n                      \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\",\r\n                      \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\",\r\n                      \"perror\", \"precision\", \"present\", \"product\", \"radix\",\r\n                      \"rand\", \"random_number\", \"random_seed\", \"range\",\r\n                      \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\",\r\n                      \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\",\r\n                      \"scan\", \"second\", \"selected_int_kind\",\r\n                      \"selected_real_kind\", \"set_exponent\", \"shape\",\r\n                      \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\",\r\n                      \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\",\r\n                      \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\",\r\n                      \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\",\r\n                      \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\",\r\n                      \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\",\r\n                      \"zlog\", \"zsin\", \"zsqrt\"]);\r\n\r\nvar dataTypes =  words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\",\r\n                        \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\",\r\n                        \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\",\r\n                        \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\",\r\n                        \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\",\r\n                        \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\",\r\n                        \"c_intptr_t\", \"c_long\", \"c_long_double\",\r\n                        \"c_long_double_complex\", \"c_long_long\", \"c_ptr\",\r\n                        \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\",\r\n                        \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\r\nvar isOperatorChar = /[+\\-*&=<>\\/\\:]/;\r\nvar litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\r\n\r\nfunction tokenBase(stream, state) {\r\n\r\n  if (stream.match(litOperator)){\r\n    return 'operator';\r\n  }\r\n\r\n  var ch = stream.next();\r\n  if (ch == \"!\") {\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n  if (ch == '\"' || ch == \"'\") {\r\n    state.tokenize = tokenString(ch);\r\n    return state.tokenize(stream, state);\r\n  }\r\n  if (/[\\[\\]\\(\\),]/.test(ch)) {\r\n    return null;\r\n  }\r\n  if (/\\d/.test(ch)) {\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    return \"number\";\r\n  }\r\n  if (isOperatorChar.test(ch)) {\r\n    stream.eatWhile(isOperatorChar);\r\n    return \"operator\";\r\n  }\r\n  stream.eatWhile(/[\\w\\$_]/);\r\n  var word = stream.current().toLowerCase();\r\n\r\n  if (keywords.hasOwnProperty(word)){\r\n    return 'keyword';\r\n  }\r\n  if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\r\n    return 'builtin';\r\n  }\r\n  return \"variable\";\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) {\r\n        end = true;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end || !escaped) state.tokenize = null;\r\n    return \"string\";\r\n  };\r\n}\r\n\r\n// Interface\r\n\r\nexport const fortran = {\r\n  name: \"fortran\",\r\n  startState: function() {\r\n    return {tokenize: null};\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    if (stream.eatSpace()) return null;\r\n    var style = (state.tokenize || tokenBase)(stream, state);\r\n    if (style == \"comment\" || style == \"meta\") return style;\r\n    return style;\r\n  }\r\n};\r\n\r\n"],
  "mappings": "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",
  "names": []
}
