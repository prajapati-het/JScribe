{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/coffeescript.js"],
  "sourcesContent": ["var ERRORCLASS = \"error\";\r\n\r\nfunction wordRegexp(words) {\r\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\r\n}\r\n\r\nvar operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\r\nvar delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\r\nvar identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\r\nvar atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\r\n\r\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\",\r\n                                \"is\", \"isnt\", \"in\",\r\n                                \"instanceof\", \"typeof\"]);\r\nvar indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\r\n                      \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\r\nvar commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\r\n                      \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\r\n                      \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\r\n\r\nvar keywords = wordRegexp(indentKeywords.concat(commonKeywords));\r\n\r\nindentKeywords = wordRegexp(indentKeywords);\r\n\r\n\r\nvar stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\r\nvar regexPrefixes = /^(\\/{3}|\\/)/;\r\nvar commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\r\nvar constants = wordRegexp(commonConstants);\r\n\r\n// Tokenizers\r\nfunction tokenBase(stream, state) {\r\n  // Handle scope changes\r\n  if (stream.sol()) {\r\n    if (state.scope.align === null) state.scope.align = false;\r\n    var scopeOffset = state.scope.offset;\r\n    if (stream.eatSpace()) {\r\n      var lineOffset = stream.indentation();\r\n      if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\r\n        return \"indent\";\r\n      } else if (lineOffset < scopeOffset) {\r\n        return \"dedent\";\r\n      }\r\n      return null;\r\n    } else {\r\n      if (scopeOffset > 0) {\r\n        dedent(stream, state);\r\n      }\r\n    }\r\n  }\r\n  if (stream.eatSpace()) {\r\n    return null;\r\n  }\r\n\r\n  var ch = stream.peek();\r\n\r\n  // Handle docco title comment (single line)\r\n  if (stream.match(\"####\")) {\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n\r\n  // Handle multi line comments\r\n  if (stream.match(\"###\")) {\r\n    state.tokenize = longComment;\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  // Single line comment\r\n  if (ch === \"#\") {\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n\r\n  // Handle number literals\r\n  if (stream.match(/^-?[0-9\\.]/, false)) {\r\n    var floatLiteral = false;\r\n    // Floats\r\n    if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\r\n      floatLiteral = true;\r\n    }\r\n    if (stream.match(/^-?\\d+\\.\\d*/)) {\r\n      floatLiteral = true;\r\n    }\r\n    if (stream.match(/^-?\\.\\d+/)) {\r\n      floatLiteral = true;\r\n    }\r\n\r\n    if (floatLiteral) {\r\n      // prevent from getting extra . on 1..\r\n      if (stream.peek() == \".\"){\r\n        stream.backUp(1);\r\n      }\r\n      return \"number\";\r\n    }\r\n    // Integers\r\n    var intLiteral = false;\r\n    // Hex\r\n    if (stream.match(/^-?0x[0-9a-f]+/i)) {\r\n      intLiteral = true;\r\n    }\r\n    // Decimal\r\n    if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\r\n      intLiteral = true;\r\n    }\r\n    // Zero by itself with no other piece of number.\r\n    if (stream.match(/^-?0(?![\\dx])/i)) {\r\n      intLiteral = true;\r\n    }\r\n    if (intLiteral) {\r\n      return \"number\";\r\n    }\r\n  }\r\n\r\n  // Handle strings\r\n  if (stream.match(stringPrefixes)) {\r\n    state.tokenize = tokenFactory(stream.current(), false, \"string\");\r\n    return state.tokenize(stream, state);\r\n  }\r\n  // Handle regex literals\r\n  if (stream.match(regexPrefixes)) {\r\n    if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\r\n      state.tokenize = tokenFactory(stream.current(), true, \"string.special\");\r\n      return state.tokenize(stream, state);\r\n    } else {\r\n      stream.backUp(1);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // Handle operators and delimiters\r\n  if (stream.match(operators) || stream.match(wordOperators)) {\r\n    return \"operator\";\r\n  }\r\n  if (stream.match(delimiters)) {\r\n    return \"punctuation\";\r\n  }\r\n\r\n  if (stream.match(constants)) {\r\n    return \"atom\";\r\n  }\r\n\r\n  if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\r\n    return \"property\";\r\n  }\r\n\r\n  if (stream.match(keywords)) {\r\n    return \"keyword\";\r\n  }\r\n\r\n  if (stream.match(identifiers)) {\r\n    return \"variable\";\r\n  }\r\n\r\n  // Handle non-detected items\r\n  stream.next();\r\n  return ERRORCLASS;\r\n}\r\n\r\nfunction tokenFactory(delimiter, singleline, outclass) {\r\n  return function(stream, state) {\r\n    while (!stream.eol()) {\r\n      stream.eatWhile(/[^'\"\\/\\\\]/);\r\n      if (stream.eat(\"\\\\\")) {\r\n        stream.next();\r\n        if (singleline && stream.eol()) {\r\n          return outclass;\r\n        }\r\n      } else if (stream.match(delimiter)) {\r\n        state.tokenize = tokenBase;\r\n        return outclass;\r\n      } else {\r\n        stream.eat(/['\"\\/]/);\r\n      }\r\n    }\r\n    if (singleline) {\r\n      state.tokenize = tokenBase;\r\n    }\r\n    return outclass;\r\n  };\r\n}\r\n\r\nfunction longComment(stream, state) {\r\n  while (!stream.eol()) {\r\n    stream.eatWhile(/[^#]/);\r\n    if (stream.match(\"###\")) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    stream.eatWhile(\"#\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction indent(stream, state, type = \"coffee\") {\r\n  var offset = 0, align = false, alignOffset = null;\r\n  for (var scope = state.scope; scope; scope = scope.prev) {\r\n    if (scope.type === \"coffee\" || scope.type == \"}\") {\r\n      offset = scope.offset + stream.indentUnit;\r\n      break;\r\n    }\r\n  }\r\n  if (type !== \"coffee\") {\r\n    align = null;\r\n    alignOffset = stream.column() + stream.current().length;\r\n  } else if (state.scope.align) {\r\n    state.scope.align = false;\r\n  }\r\n  state.scope = {\r\n    offset: offset,\r\n    type: type,\r\n    prev: state.scope,\r\n    align: align,\r\n    alignOffset: alignOffset\r\n  };\r\n}\r\n\r\nfunction dedent(stream, state) {\r\n  if (!state.scope.prev) return;\r\n  if (state.scope.type === \"coffee\") {\r\n    var _indent = stream.indentation();\r\n    var matched = false;\r\n    for (var scope = state.scope; scope; scope = scope.prev) {\r\n      if (_indent === scope.offset) {\r\n        matched = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!matched) {\r\n      return true;\r\n    }\r\n    while (state.scope.prev && state.scope.offset !== _indent) {\r\n      state.scope = state.scope.prev;\r\n    }\r\n    return false;\r\n  } else {\r\n    state.scope = state.scope.prev;\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction tokenLexer(stream, state) {\r\n  var style = state.tokenize(stream, state);\r\n  var current = stream.current();\r\n\r\n  // Handle scope changes.\r\n  if (current === \"return\") {\r\n    state.dedent = true;\r\n  }\r\n  if (((current === \"->\" || current === \"=>\") && stream.eol())\r\n      || style === \"indent\") {\r\n    indent(stream, state);\r\n  }\r\n  var delimiter_index = \"[({\".indexOf(current);\r\n  if (delimiter_index !== -1) {\r\n    indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\r\n  }\r\n  if (indentKeywords.exec(current)){\r\n    indent(stream, state);\r\n  }\r\n  if (current == \"then\"){\r\n    dedent(stream, state);\r\n  }\r\n\r\n\r\n  if (style === \"dedent\") {\r\n    if (dedent(stream, state)) {\r\n      return ERRORCLASS;\r\n    }\r\n  }\r\n  delimiter_index = \"])}\".indexOf(current);\r\n  if (delimiter_index !== -1) {\r\n    while (state.scope.type == \"coffee\" && state.scope.prev)\r\n      state.scope = state.scope.prev;\r\n    if (state.scope.type == current)\r\n      state.scope = state.scope.prev;\r\n  }\r\n  if (state.dedent && stream.eol()) {\r\n    if (state.scope.type == \"coffee\" && state.scope.prev)\r\n      state.scope = state.scope.prev;\r\n    state.dedent = false;\r\n  }\r\n\r\n  return style == \"indent\" || style == \"dedent\" ? null : style;\r\n}\r\n\r\nexport const coffeeScript = {\r\n  name: \"coffeescript\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      scope: {offset: 0, type:\"coffee\", prev: null, align: false},\r\n      prop: false,\r\n      dedent: 0\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    var fillAlign = state.scope.align === null && state.scope;\r\n    if (fillAlign && stream.sol()) fillAlign.align = false;\r\n\r\n    var style = tokenLexer(stream, state);\r\n    if (style && style != \"comment\") {\r\n      if (fillAlign) fillAlign.align = true;\r\n      state.prop = style == \"punctuation\" && stream.current() == \".\"\r\n    }\r\n\r\n    return style;\r\n  },\r\n\r\n  indent: function(state, text) {\r\n    if (state.tokenize != tokenBase) return 0;\r\n    var scope = state.scope;\r\n    var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\r\n    if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\r\n    var closes = closer && scope.type === text.charAt(0);\r\n    if (scope.align)\r\n      return scope.alignOffset - (closes ? 1 : 0);\r\n    else\r\n      return (closes ? scope.prev : scope).offset;\r\n  },\r\n\r\n  languageData: {\r\n    commentTokens: {line: \"#\"}\r\n  }\r\n};\r\n"],
  "mappings": ";AAAA,IAAI,aAAa;AAEjB,SAAS,WAAW,OAAO;AACzB,SAAO,IAAI,OAAO,QAAQ,MAAM,KAAK,KAAK,IAAI,OAAO;AACvD;AAEA,IAAI,YAAY;AAChB,IAAI,aAAa;AACjB,IAAI,cAAc;AAClB,IAAI,SAAS;AAEb,IAAI,gBAAgB,WAAW;AAAA,EAAC;AAAA,EAAO;AAAA,EAAM;AAAA,EACb;AAAA,EAAM;AAAA,EAAQ;AAAA,EACd;AAAA,EAAc;AAAQ,CAAC;AACvD,IAAI,iBAAiB;AAAA,EAAC;AAAA,EAAO;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAM;AAAA,EAAU;AAAA,EACxC;AAAA,EAAU;AAAA,EAAO;AAAA,EAAS;AAAA,EAAW;AAAO;AAClE,IAAI,iBAAiB;AAAA,EAAC;AAAA,EAAS;AAAA,EAAM;AAAA,EAAY;AAAA,EAAY;AAAA,EACvC;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAO;AAAA,EAAU;AAAA,EACnC;AAAA,EAAQ;AAAA,EAAK;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAS;AAAS;AAEtE,IAAI,WAAW,WAAW,eAAe,OAAO,cAAc,CAAC;AAE/D,iBAAiB,WAAW,cAAc;AAG1C,IAAI,iBAAiB;AACrB,IAAI,gBAAgB;AACpB,IAAI,kBAAkB,CAAC,YAAY,OAAO,aAAa,QAAQ,QAAQ,SAAS,MAAM,OAAO,OAAO,IAAI;AACxG,IAAI,YAAY,WAAW,eAAe;AAG1C,SAAS,UAAU,QAAQ,OAAO;AAEhC,MAAI,OAAO,IAAI,GAAG;AAChB,QAAI,MAAM,MAAM,UAAU,KAAM,OAAM,MAAM,QAAQ;AACpD,QAAI,cAAc,MAAM,MAAM;AAC9B,QAAI,OAAO,SAAS,GAAG;AACrB,UAAI,aAAa,OAAO,YAAY;AACpC,UAAI,aAAa,eAAe,MAAM,MAAM,QAAQ,UAAU;AAC5D,eAAO;AAAA,MACT,WAAW,aAAa,aAAa;AACnC,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,OAAO;AACL,UAAI,cAAc,GAAG;AACnB,eAAO,QAAQ,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AACA,MAAI,OAAO,SAAS,GAAG;AACrB,WAAO;AAAA,EACT;AAEA,MAAI,KAAK,OAAO,KAAK;AAGrB,MAAI,OAAO,MAAM,MAAM,GAAG;AACxB,WAAO,UAAU;AACjB,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,MAAM,KAAK,GAAG;AACvB,UAAM,WAAW;AACjB,WAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,EACrC;AAGA,MAAI,OAAO,KAAK;AACd,WAAO,UAAU;AACjB,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,MAAM,cAAc,KAAK,GAAG;AACrC,QAAI,eAAe;AAEnB,QAAI,OAAO,MAAM,4BAA4B,GAAG;AAC9C,qBAAe;AAAA,IACjB;AACA,QAAI,OAAO,MAAM,aAAa,GAAG;AAC/B,qBAAe;AAAA,IACjB;AACA,QAAI,OAAO,MAAM,UAAU,GAAG;AAC5B,qBAAe;AAAA,IACjB;AAEA,QAAI,cAAc;AAEhB,UAAI,OAAO,KAAK,KAAK,KAAI;AACvB,eAAO,OAAO,CAAC;AAAA,MACjB;AACA,aAAO;AAAA,IACT;AAEA,QAAI,aAAa;AAEjB,QAAI,OAAO,MAAM,iBAAiB,GAAG;AACnC,mBAAa;AAAA,IACf;AAEA,QAAI,OAAO,MAAM,2BAA2B,GAAG;AAC7C,mBAAa;AAAA,IACf;AAEA,QAAI,OAAO,MAAM,gBAAgB,GAAG;AAClC,mBAAa;AAAA,IACf;AACA,QAAI,YAAY;AACd,aAAO;AAAA,IACT;AAAA,EACF;AAGA,MAAI,OAAO,MAAM,cAAc,GAAG;AAChC,UAAM,WAAW,aAAa,OAAO,QAAQ,GAAG,OAAO,QAAQ;AAC/D,WAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,EACrC;AAEA,MAAI,OAAO,MAAM,aAAa,GAAG;AAC/B,QAAI,OAAO,QAAQ,KAAK,OAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAC3D,YAAM,WAAW,aAAa,OAAO,QAAQ,GAAG,MAAM,gBAAgB;AACtE,aAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,IACrC,OAAO;AACL,aAAO,OAAO,CAAC;AAAA,IACjB;AAAA,EACF;AAKA,MAAI,OAAO,MAAM,SAAS,KAAK,OAAO,MAAM,aAAa,GAAG;AAC1D,WAAO;AAAA,EACT;AACA,MAAI,OAAO,MAAM,UAAU,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,MAAM,SAAS,GAAG;AAC3B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,MAAM,MAAM,KAAK,MAAM,QAAQ,OAAO,MAAM,WAAW,GAAG;AACnE,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,MAAM,QAAQ,GAAG;AAC1B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,MAAM,WAAW,GAAG;AAC7B,WAAO;AAAA,EACT;AAGA,SAAO,KAAK;AACZ,SAAO;AACT;AAEA,SAAS,aAAa,WAAW,YAAY,UAAU;AACrD,SAAO,SAAS,QAAQ,OAAO;AAC7B,WAAO,CAAC,OAAO,IAAI,GAAG;AACpB,aAAO,SAAS,WAAW;AAC3B,UAAI,OAAO,IAAI,IAAI,GAAG;AACpB,eAAO,KAAK;AACZ,YAAI,cAAc,OAAO,IAAI,GAAG;AAC9B,iBAAO;AAAA,QACT;AAAA,MACF,WAAW,OAAO,MAAM,SAAS,GAAG;AAClC,cAAM,WAAW;AACjB,eAAO;AAAA,MACT,OAAO;AACL,eAAO,IAAI,QAAQ;AAAA,MACrB;AAAA,IACF;AACA,QAAI,YAAY;AACd,YAAM,WAAW;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AACF;AAEA,SAAS,YAAY,QAAQ,OAAO;AAClC,SAAO,CAAC,OAAO,IAAI,GAAG;AACpB,WAAO,SAAS,MAAM;AACtB,QAAI,OAAO,MAAM,KAAK,GAAG;AACvB,YAAM,WAAW;AACjB;AAAA,IACF;AACA,WAAO,SAAS,GAAG;AAAA,EACrB;AACA,SAAO;AACT;AAEA,SAAS,OAAO,QAAQ,OAAO,OAAO,UAAU;AAC9C,MAAI,SAAS,GAAG,QAAQ,OAAO,cAAc;AAC7C,WAAS,QAAQ,MAAM,OAAO,OAAO,QAAQ,MAAM,MAAM;AACvD,QAAI,MAAM,SAAS,YAAY,MAAM,QAAQ,KAAK;AAChD,eAAS,MAAM,SAAS,OAAO;AAC/B;AAAA,IACF;AAAA,EACF;AACA,MAAI,SAAS,UAAU;AACrB,YAAQ;AACR,kBAAc,OAAO,OAAO,IAAI,OAAO,QAAQ,EAAE;AAAA,EACnD,WAAW,MAAM,MAAM,OAAO;AAC5B,UAAM,MAAM,QAAQ;AAAA,EACtB;AACA,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA,MAAM,MAAM;AAAA,IACZ;AAAA,IACA;AAAA,EACF;AACF;AAEA,SAAS,OAAO,QAAQ,OAAO;AAC7B,MAAI,CAAC,MAAM,MAAM,KAAM;AACvB,MAAI,MAAM,MAAM,SAAS,UAAU;AACjC,QAAI,UAAU,OAAO,YAAY;AACjC,QAAI,UAAU;AACd,aAAS,QAAQ,MAAM,OAAO,OAAO,QAAQ,MAAM,MAAM;AACvD,UAAI,YAAY,MAAM,QAAQ;AAC5B,kBAAU;AACV;AAAA,MACF;AAAA,IACF;AACA,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,WAAO,MAAM,MAAM,QAAQ,MAAM,MAAM,WAAW,SAAS;AACzD,YAAM,QAAQ,MAAM,MAAM;AAAA,IAC5B;AACA,WAAO;AAAA,EACT,OAAO;AACL,UAAM,QAAQ,MAAM,MAAM;AAC1B,WAAO;AAAA,EACT;AACF;AAEA,SAAS,WAAW,QAAQ,OAAO;AACjC,MAAI,QAAQ,MAAM,SAAS,QAAQ,KAAK;AACxC,MAAI,UAAU,OAAO,QAAQ;AAG7B,MAAI,YAAY,UAAU;AACxB,UAAM,SAAS;AAAA,EACjB;AACA,OAAM,YAAY,QAAQ,YAAY,SAAS,OAAO,IAAI,KACnD,UAAU,UAAU;AACzB,WAAO,QAAQ,KAAK;AAAA,EACtB;AACA,MAAI,kBAAkB,MAAM,QAAQ,OAAO;AAC3C,MAAI,oBAAoB,IAAI;AAC1B,WAAO,QAAQ,OAAO,MAAM,MAAM,iBAAiB,kBAAgB,CAAC,CAAC;AAAA,EACvE;AACA,MAAI,eAAe,KAAK,OAAO,GAAE;AAC/B,WAAO,QAAQ,KAAK;AAAA,EACtB;AACA,MAAI,WAAW,QAAO;AACpB,WAAO,QAAQ,KAAK;AAAA,EACtB;AAGA,MAAI,UAAU,UAAU;AACtB,QAAI,OAAO,QAAQ,KAAK,GAAG;AACzB,aAAO;AAAA,IACT;AAAA,EACF;AACA,oBAAkB,MAAM,QAAQ,OAAO;AACvC,MAAI,oBAAoB,IAAI;AAC1B,WAAO,MAAM,MAAM,QAAQ,YAAY,MAAM,MAAM;AACjD,YAAM,QAAQ,MAAM,MAAM;AAC5B,QAAI,MAAM,MAAM,QAAQ;AACtB,YAAM,QAAQ,MAAM,MAAM;AAAA,EAC9B;AACA,MAAI,MAAM,UAAU,OAAO,IAAI,GAAG;AAChC,QAAI,MAAM,MAAM,QAAQ,YAAY,MAAM,MAAM;AAC9C,YAAM,QAAQ,MAAM,MAAM;AAC5B,UAAM,SAAS;AAAA,EACjB;AAEA,SAAO,SAAS,YAAY,SAAS,WAAW,OAAO;AACzD;AAEO,IAAM,eAAe;AAAA,EAC1B,MAAM;AAAA,EACN,YAAY,WAAW;AACrB,WAAO;AAAA,MACL,UAAU;AAAA,MACV,OAAO,EAAC,QAAQ,GAAG,MAAK,UAAU,MAAM,MAAM,OAAO,MAAK;AAAA,MAC1D,MAAM;AAAA,MACN,QAAQ;AAAA,IACV;AAAA,EACF;AAAA,EAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,YAAY,MAAM,MAAM,UAAU,QAAQ,MAAM;AACpD,QAAI,aAAa,OAAO,IAAI,EAAG,WAAU,QAAQ;AAEjD,QAAI,QAAQ,WAAW,QAAQ,KAAK;AACpC,QAAI,SAAS,SAAS,WAAW;AAC/B,UAAI,UAAW,WAAU,QAAQ;AACjC,YAAM,OAAO,SAAS,iBAAiB,OAAO,QAAQ,KAAK;AAAA,IAC7D;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ,SAAS,OAAO,MAAM;AAC5B,QAAI,MAAM,YAAY,UAAW,QAAO;AACxC,QAAI,QAAQ,MAAM;AAClB,QAAI,SAAS,QAAQ,MAAM,QAAQ,KAAK,OAAO,CAAC,CAAC,IAAI;AACrD,QAAI,OAAQ,QAAO,MAAM,QAAQ,YAAY,MAAM,KAAM,SAAQ,MAAM;AACvE,QAAI,SAAS,UAAU,MAAM,SAAS,KAAK,OAAO,CAAC;AACnD,QAAI,MAAM;AACR,aAAO,MAAM,eAAe,SAAS,IAAI;AAAA;AAEzC,cAAQ,SAAS,MAAM,OAAO,OAAO;AAAA,EACzC;AAAA,EAEA,cAAc;AAAA,IACZ,eAAe,EAAC,MAAM,IAAG;AAAA,EAC3B;AACF;",
  "names": []
}
