{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/modelica.js"],
  "sourcesContent": ["function words(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i=0; i<words.length; ++i)\r\n    obj[words[i]] = true;\r\n  return obj;\r\n}\r\n\r\nvar keywords = words(\"algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within\")\r\nvar builtin = words(\"abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh\")\r\nvar atoms = words(\"Real Boolean Integer String\")\r\n\r\nvar completions = [].concat(Object.keys(keywords), Object.keys(builtin), Object.keys(atoms))\r\n\r\nvar isSingleOperatorChar = /[;=\\(:\\),{}.*<>+\\-\\/^\\[\\]]/;\r\nvar isDoubleOperatorChar = /(:=|<=|>=|==|<>|\\.\\+|\\.\\-|\\.\\*|\\.\\/|\\.\\^)/;\r\nvar isDigit = /[0-9]/;\r\nvar isNonDigit = /[_a-zA-Z]/;\r\n\r\nfunction tokenLineComment(stream, state) {\r\n  stream.skipToEnd();\r\n  state.tokenize = null;\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenBlockComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (maybeEnd && ch == \"/\") {\r\n      state.tokenize = null;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenString(stream, state) {\r\n  var escaped = false, ch;\r\n  while ((ch = stream.next()) != null) {\r\n    if (ch == '\"' && !escaped) {\r\n      state.tokenize = null;\r\n      state.sol = false;\r\n      break;\r\n    }\r\n    escaped = !escaped && ch == \"\\\\\";\r\n  }\r\n\r\n  return \"string\";\r\n}\r\n\r\nfunction tokenIdent(stream, state) {\r\n  stream.eatWhile(isDigit);\r\n  while (stream.eat(isDigit) || stream.eat(isNonDigit)) { }\r\n\r\n\r\n  var cur = stream.current();\r\n\r\n  if(state.sol && (cur == \"package\" || cur == \"model\" || cur == \"when\" || cur == \"connector\")) state.level++;\r\n  else if(state.sol && cur == \"end\" && state.level > 0) state.level--;\r\n\r\n  state.tokenize = null;\r\n  state.sol = false;\r\n\r\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\r\n  else if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\r\n  else if (atoms.propertyIsEnumerable(cur)) return \"atom\";\r\n  else return \"variable\";\r\n}\r\n\r\nfunction tokenQIdent(stream, state) {\r\n  while (stream.eat(/[^']/)) { }\r\n\r\n  state.tokenize = null;\r\n  state.sol = false;\r\n\r\n  if(stream.eat(\"'\"))\r\n    return \"variable\";\r\n  else\r\n    return \"error\";\r\n}\r\n\r\nfunction tokenUnsignedNumber(stream, state) {\r\n  stream.eatWhile(isDigit);\r\n  if (stream.eat('.')) {\r\n    stream.eatWhile(isDigit);\r\n  }\r\n  if (stream.eat('e') || stream.eat('E')) {\r\n    if (!stream.eat('-'))\r\n      stream.eat('+');\r\n    stream.eatWhile(isDigit);\r\n  }\r\n\r\n  state.tokenize = null;\r\n  state.sol = false;\r\n  return \"number\";\r\n}\r\n\r\n// Interface\r\nexport const modelica = {\r\n  name: \"modelica\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: null,\r\n      level: 0,\r\n      sol: true\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    if(state.tokenize != null) {\r\n      return state.tokenize(stream, state);\r\n    }\r\n\r\n    if(stream.sol()) {\r\n      state.sol = true;\r\n    }\r\n\r\n    // WHITESPACE\r\n    if(stream.eatSpace()) {\r\n      state.tokenize = null;\r\n      return null;\r\n    }\r\n\r\n    var ch = stream.next();\r\n\r\n    // LINECOMMENT\r\n    if(ch == '/' && stream.eat('/')) {\r\n      state.tokenize = tokenLineComment;\r\n    }\r\n    // BLOCKCOMMENT\r\n    else if(ch == '/' && stream.eat('*')) {\r\n      state.tokenize = tokenBlockComment;\r\n    }\r\n    // TWO SYMBOL TOKENS\r\n    else if(isDoubleOperatorChar.test(ch+stream.peek())) {\r\n      stream.next();\r\n      state.tokenize = null;\r\n      return \"operator\";\r\n    }\r\n    // SINGLE SYMBOL TOKENS\r\n    else if(isSingleOperatorChar.test(ch)) {\r\n      state.tokenize = null;\r\n      return \"operator\";\r\n    }\r\n    // IDENT\r\n    else if(isNonDigit.test(ch)) {\r\n      state.tokenize = tokenIdent;\r\n    }\r\n    // Q-IDENT\r\n    else if(ch == \"'\" && stream.peek() && stream.peek() != \"'\") {\r\n      state.tokenize = tokenQIdent;\r\n    }\r\n    // STRING\r\n    else if(ch == '\"') {\r\n      state.tokenize = tokenString;\r\n    }\r\n    // UNSIGNED_NUMBER\r\n    else if(isDigit.test(ch)) {\r\n      state.tokenize = tokenUnsignedNumber;\r\n    }\r\n    // ERROR\r\n    else {\r\n      state.tokenize = null;\r\n      return \"error\";\r\n    }\r\n\r\n    return state.tokenize(stream, state);\r\n  },\r\n\r\n  indent: function(state, textAfter, cx) {\r\n    if (state.tokenize != null) return null;\r\n\r\n    var level = state.level;\r\n    if(/(algorithm)/.test(textAfter)) level--;\r\n    if(/(equation)/.test(textAfter)) level--;\r\n    if(/(initial algorithm)/.test(textAfter)) level--;\r\n    if(/(initial equation)/.test(textAfter)) level--;\r\n    if(/(end)/.test(textAfter)) level--;\r\n\r\n    if(level > 0)\r\n      return cx.unit*level;\r\n    else\r\n      return 0;\r\n  },\r\n\r\n  languageData: {\r\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\r\n    autocomplete: completions\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["words"]
}
