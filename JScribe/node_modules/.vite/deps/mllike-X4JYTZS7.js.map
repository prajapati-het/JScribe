{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/mllike.js"],
  "sourcesContent": ["function mlLike(parserConfig) {\r\n  var words = {\r\n    'as': 'keyword',\r\n    'do': 'keyword',\r\n    'else': 'keyword',\r\n    'end': 'keyword',\r\n    'exception': 'keyword',\r\n    'fun': 'keyword',\r\n    'functor': 'keyword',\r\n    'if': 'keyword',\r\n    'in': 'keyword',\r\n    'include': 'keyword',\r\n    'let': 'keyword',\r\n    'of': 'keyword',\r\n    'open': 'keyword',\r\n    'rec': 'keyword',\r\n    'struct': 'keyword',\r\n    'then': 'keyword',\r\n    'type': 'keyword',\r\n    'val': 'keyword',\r\n    'while': 'keyword',\r\n    'with': 'keyword'\r\n  };\r\n\r\n  var extraWords = parserConfig.extraWords || {};\r\n  for (var prop in extraWords) {\r\n    if (extraWords.hasOwnProperty(prop)) {\r\n      words[prop] = parserConfig.extraWords[prop];\r\n    }\r\n  }\r\n  var hintWords = [];\r\n  for (var k in words) { hintWords.push(k); }\r\n\r\n  function tokenBase(stream, state) {\r\n    var ch = stream.next();\r\n\r\n    if (ch === '\"') {\r\n      state.tokenize = tokenString;\r\n      return state.tokenize(stream, state);\r\n    }\r\n    if (ch === '{') {\r\n      if (stream.eat('|')) {\r\n        state.longString = true;\r\n        state.tokenize = tokenLongString;\r\n        return state.tokenize(stream, state);\r\n      }\r\n    }\r\n    if (ch === '(') {\r\n      if (stream.match(/^\\*(?!\\))/)) {\r\n        state.commentLevel++;\r\n        state.tokenize = tokenComment;\r\n        return state.tokenize(stream, state);\r\n      }\r\n    }\r\n    if (ch === '~' || ch === '?') {\r\n      stream.eatWhile(/\\w/);\r\n      return 'variableName.special';\r\n    }\r\n    if (ch === '`') {\r\n      stream.eatWhile(/\\w/);\r\n      return 'quote';\r\n    }\r\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\r\n      stream.skipToEnd();\r\n      return 'comment';\r\n    }\r\n    if (/\\d/.test(ch)) {\r\n      if (ch === '0' && stream.eat(/[bB]/)) {\r\n        stream.eatWhile(/[01]/);\r\n      } if (ch === '0' && stream.eat(/[xX]/)) {\r\n        stream.eatWhile(/[0-9a-fA-F]/)\r\n      } if (ch === '0' && stream.eat(/[oO]/)) {\r\n        stream.eatWhile(/[0-7]/);\r\n      } else {\r\n        stream.eatWhile(/[\\d_]/);\r\n        if (stream.eat('.')) {\r\n          stream.eatWhile(/[\\d]/);\r\n        }\r\n        if (stream.eat(/[eE]/)) {\r\n          stream.eatWhile(/[\\d\\-+]/);\r\n        }\r\n      }\r\n      return 'number';\r\n    }\r\n    if ( /[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\r\n      return 'operator';\r\n    }\r\n    if (/[\\w\\xa1-\\uffff]/.test(ch)) {\r\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\r\n      var cur = stream.current();\r\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\r\n    }\r\n    return null\r\n  }\r\n\r\n  function tokenString(stream, state) {\r\n    var next, end = false, escaped = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next === '\"' && !escaped) {\r\n        end = true;\r\n        break;\r\n      }\r\n      escaped = !escaped && next === '\\\\';\r\n    }\r\n    if (end && !escaped) {\r\n      state.tokenize = tokenBase;\r\n    }\r\n    return 'string';\r\n  };\r\n\r\n  function tokenComment(stream, state) {\r\n    var prev, next;\r\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\r\n      if (prev === '(' && next === '*') state.commentLevel++;\r\n      if (prev === '*' && next === ')') state.commentLevel--;\r\n      prev = next;\r\n    }\r\n    if (state.commentLevel <= 0) {\r\n      state.tokenize = tokenBase;\r\n    }\r\n    return 'comment';\r\n  }\r\n\r\n  function tokenLongString(stream, state) {\r\n    var prev, next;\r\n    while (state.longString && (next = stream.next()) != null) {\r\n      if (prev === '|' && next === '}') state.longString = false;\r\n      prev = next;\r\n    }\r\n    if (!state.longString) {\r\n      state.tokenize = tokenBase;\r\n    }\r\n    return 'string';\r\n  }\r\n\r\n  return {\r\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},\r\n    token: function(stream, state) {\r\n      if (stream.eatSpace()) return null;\r\n      return state.tokenize(stream, state);\r\n    },\r\n\r\n    languageData: {\r\n      autocomplete: hintWords,\r\n      commentTokens: {\r\n        line: parserConfig.slashComments ? \"//\" : undefined,\r\n        block: {open: \"(*\", close: \"*)\"}\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const oCaml = mlLike({\r\n  name: \"ocaml\",\r\n  extraWords: {\r\n    'and': 'keyword',\r\n    'assert': 'keyword',\r\n    'begin': 'keyword',\r\n    'class': 'keyword',\r\n    'constraint': 'keyword',\r\n    'done': 'keyword',\r\n    'downto': 'keyword',\r\n    'external': 'keyword',\r\n    'function': 'keyword',\r\n    'initializer': 'keyword',\r\n    'lazy': 'keyword',\r\n    'match': 'keyword',\r\n    'method': 'keyword',\r\n    'module': 'keyword',\r\n    'mutable': 'keyword',\r\n    'new': 'keyword',\r\n    'nonrec': 'keyword',\r\n    'object': 'keyword',\r\n    'private': 'keyword',\r\n    'sig': 'keyword',\r\n    'to': 'keyword',\r\n    'try': 'keyword',\r\n    'value': 'keyword',\r\n    'virtual': 'keyword',\r\n    'when': 'keyword',\r\n\r\n    // builtins\r\n    'raise': 'builtin',\r\n    'failwith': 'builtin',\r\n    'true': 'builtin',\r\n    'false': 'builtin',\r\n\r\n    // Pervasives builtins\r\n    'asr': 'builtin',\r\n    'land': 'builtin',\r\n    'lor': 'builtin',\r\n    'lsl': 'builtin',\r\n    'lsr': 'builtin',\r\n    'lxor': 'builtin',\r\n    'mod': 'builtin',\r\n    'or': 'builtin',\r\n\r\n    // More Pervasives\r\n    'raise_notrace': 'builtin',\r\n    'trace': 'builtin',\r\n    'exit': 'builtin',\r\n    'print_string': 'builtin',\r\n    'print_endline': 'builtin',\r\n\r\n     'int': 'type',\r\n     'float': 'type',\r\n     'bool': 'type',\r\n     'char': 'type',\r\n     'string': 'type',\r\n     'unit': 'type',\r\n\r\n     // Modules\r\n     'List': 'builtin'\r\n  }\r\n});\r\n\r\nexport const fSharp = mlLike({\r\n  name: \"fsharp\",\r\n  extraWords: {\r\n    'abstract': 'keyword',\r\n    'assert': 'keyword',\r\n    'base': 'keyword',\r\n    'begin': 'keyword',\r\n    'class': 'keyword',\r\n    'default': 'keyword',\r\n    'delegate': 'keyword',\r\n    'do!': 'keyword',\r\n    'done': 'keyword',\r\n    'downcast': 'keyword',\r\n    'downto': 'keyword',\r\n    'elif': 'keyword',\r\n    'extern': 'keyword',\r\n    'finally': 'keyword',\r\n    'for': 'keyword',\r\n    'function': 'keyword',\r\n    'global': 'keyword',\r\n    'inherit': 'keyword',\r\n    'inline': 'keyword',\r\n    'interface': 'keyword',\r\n    'internal': 'keyword',\r\n    'lazy': 'keyword',\r\n    'let!': 'keyword',\r\n    'match': 'keyword',\r\n    'member': 'keyword',\r\n    'module': 'keyword',\r\n    'mutable': 'keyword',\r\n    'namespace': 'keyword',\r\n    'new': 'keyword',\r\n    'null': 'keyword',\r\n    'override': 'keyword',\r\n    'private': 'keyword',\r\n    'public': 'keyword',\r\n    'return!': 'keyword',\r\n    'return': 'keyword',\r\n    'select': 'keyword',\r\n    'static': 'keyword',\r\n    'to': 'keyword',\r\n    'try': 'keyword',\r\n    'upcast': 'keyword',\r\n    'use!': 'keyword',\r\n    'use': 'keyword',\r\n    'void': 'keyword',\r\n    'when': 'keyword',\r\n    'yield!': 'keyword',\r\n    'yield': 'keyword',\r\n\r\n    // Reserved words\r\n    'atomic': 'keyword',\r\n    'break': 'keyword',\r\n    'checked': 'keyword',\r\n    'component': 'keyword',\r\n    'const': 'keyword',\r\n    'constraint': 'keyword',\r\n    'constructor': 'keyword',\r\n    'continue': 'keyword',\r\n    'eager': 'keyword',\r\n    'event': 'keyword',\r\n    'external': 'keyword',\r\n    'fixed': 'keyword',\r\n    'method': 'keyword',\r\n    'mixin': 'keyword',\r\n    'object': 'keyword',\r\n    'parallel': 'keyword',\r\n    'process': 'keyword',\r\n    'protected': 'keyword',\r\n    'pure': 'keyword',\r\n    'sealed': 'keyword',\r\n    'tailcall': 'keyword',\r\n    'trait': 'keyword',\r\n    'virtual': 'keyword',\r\n    'volatile': 'keyword',\r\n\r\n    // builtins\r\n    'List': 'builtin',\r\n    'Seq': 'builtin',\r\n    'Map': 'builtin',\r\n    'Set': 'builtin',\r\n    'Option': 'builtin',\r\n    'int': 'builtin',\r\n    'string': 'builtin',\r\n    'not': 'builtin',\r\n    'true': 'builtin',\r\n    'false': 'builtin',\r\n\r\n    'raise': 'builtin',\r\n    'failwith': 'builtin'\r\n  },\r\n  slashComments: true\r\n});\r\n\r\nexport const sml = mlLike({\r\n  name: \"sml\",\r\n  extraWords: {\r\n    'abstype': 'keyword',\r\n    'and': 'keyword',\r\n    'andalso': 'keyword',\r\n    'case': 'keyword',\r\n    'datatype': 'keyword',\r\n    'fn': 'keyword',\r\n    'handle': 'keyword',\r\n    'infix': 'keyword',\r\n    'infixr': 'keyword',\r\n    'local': 'keyword',\r\n    'nonfix': 'keyword',\r\n    'op': 'keyword',\r\n    'orelse': 'keyword',\r\n    'raise': 'keyword',\r\n    'withtype': 'keyword',\r\n    'eqtype': 'keyword',\r\n    'sharing': 'keyword',\r\n    'sig': 'keyword',\r\n    'signature': 'keyword',\r\n    'structure': 'keyword',\r\n    'where': 'keyword',\r\n    'true': 'keyword',\r\n    'false': 'keyword',\r\n\r\n    // types\r\n    'int': 'builtin',\r\n    'real': 'builtin',\r\n    'string': 'builtin',\r\n    'char': 'builtin',\r\n    'bool': 'builtin'\r\n  },\r\n  slashComments: true\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
