{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/elm.js"],
  "sourcesContent": ["function switchState(source, setState, f)\r\n{\r\n  setState(f);\r\n  return f(source, setState);\r\n}\r\n\r\nvar lowerRE = /[a-z]/;\r\nvar upperRE = /[A-Z]/;\r\nvar innerRE = /[a-zA-Z0-9_]/;\r\n\r\nvar digitRE = /[0-9]/;\r\nvar hexRE = /[0-9A-Fa-f]/;\r\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\r\nvar specialRE = /[(),[\\]{}]/;\r\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\r\n\r\nfunction normal()\r\n{\r\n  return function(source, setState)\r\n  {\r\n    if (source.eatWhile(spacesRE))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    var char = source.next();\r\n\r\n    if (specialRE.test(char))\r\n    {\r\n      return (char === '{' && source.eat('-'))\r\n        ? switchState(source, setState, chompMultiComment(1))\r\n        : (char === '[' && source.match('glsl|'))\r\n        ? switchState(source, setState, chompGlsl)\r\n        : 'builtin';\r\n    }\r\n\r\n    if (char === '\\'')\r\n    {\r\n      return switchState(source, setState, chompChar);\r\n    }\r\n\r\n    if (char === '\"')\r\n    {\r\n      return source.eat('\"')\r\n        ? source.eat('\"')\r\n        ? switchState(source, setState, chompMultiString)\r\n        : 'string'\r\n      : switchState(source, setState, chompSingleString);\r\n    }\r\n\r\n    if (upperRE.test(char))\r\n    {\r\n      source.eatWhile(innerRE);\r\n      return 'type';\r\n    }\r\n\r\n    if (lowerRE.test(char))\r\n    {\r\n      var isDef = source.pos === 1;\r\n      source.eatWhile(innerRE);\r\n      return isDef ? \"def\" : \"variable\";\r\n    }\r\n\r\n    if (digitRE.test(char))\r\n    {\r\n      if (char === '0')\r\n      {\r\n        if (source.eat(/[xX]/))\r\n        {\r\n          source.eatWhile(hexRE); // should require at least 1\r\n          return \"number\";\r\n        }\r\n      }\r\n      else\r\n      {\r\n        source.eatWhile(digitRE);\r\n      }\r\n      if (source.eat('.'))\r\n      {\r\n        source.eatWhile(digitRE); // should require at least 1\r\n      }\r\n      if (source.eat(/[eE]/))\r\n      {\r\n        source.eat(/[-+]/);\r\n        source.eatWhile(digitRE); // should require at least 1\r\n      }\r\n      return \"number\";\r\n    }\r\n\r\n    if (symbolRE.test(char))\r\n    {\r\n      if (char === '-' && source.eat('-'))\r\n      {\r\n        source.skipToEnd();\r\n        return \"comment\";\r\n      }\r\n      source.eatWhile(symbolRE);\r\n      return \"keyword\";\r\n    }\r\n\r\n    if (char === '_')\r\n    {\r\n      return \"keyword\";\r\n    }\r\n\r\n    return \"error\";\r\n  }\r\n}\r\n\r\nfunction chompMultiComment(nest)\r\n{\r\n  if (nest == 0)\r\n  {\r\n    return normal();\r\n  }\r\n  return function(source, setState)\r\n  {\r\n    while (!source.eol())\r\n    {\r\n      var char = source.next();\r\n      if (char == '{' && source.eat('-'))\r\n      {\r\n        ++nest;\r\n      }\r\n      else if (char == '-' && source.eat('}'))\r\n      {\r\n        --nest;\r\n        if (nest === 0)\r\n        {\r\n          setState(normal());\r\n          return 'comment';\r\n        }\r\n      }\r\n    }\r\n    setState(chompMultiComment(nest));\r\n    return 'comment';\r\n  }\r\n}\r\n\r\nfunction chompMultiString(source, setState)\r\n{\r\n  while (!source.eol())\r\n  {\r\n    var char = source.next();\r\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\r\n    {\r\n      setState(normal());\r\n      return 'string';\r\n    }\r\n  }\r\n  return 'string';\r\n}\r\n\r\nfunction chompSingleString(source, setState)\r\n{\r\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\r\n  if (source.skipTo('\"'))\r\n  {\r\n    source.next();\r\n    setState(normal());\r\n    return 'string';\r\n  }\r\n  source.skipToEnd();\r\n  setState(normal());\r\n  return 'error';\r\n}\r\n\r\nfunction chompChar(source, setState)\r\n{\r\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\r\n  if (source.skipTo(\"'\"))\r\n  {\r\n    source.next();\r\n    setState(normal());\r\n    return 'string';\r\n  }\r\n  source.skipToEnd();\r\n  setState(normal());\r\n  return 'error';\r\n}\r\n\r\nfunction chompGlsl(source, setState)\r\n{\r\n  while (!source.eol())\r\n  {\r\n    var char = source.next();\r\n    if (char === '|' && source.eat(']'))\r\n    {\r\n      setState(normal());\r\n      return 'string';\r\n    }\r\n  }\r\n  return 'string';\r\n}\r\n\r\nvar wellKnownWords = {\r\n  case: 1,\r\n  of: 1,\r\n  as: 1,\r\n  if: 1,\r\n  then: 1,\r\n  else: 1,\r\n  let: 1,\r\n    in: 1,\r\n  type: 1,\r\n  alias: 1,\r\n  module: 1,\r\n  where: 1,\r\n  import: 1,\r\n  exposing: 1,\r\n  port: 1\r\n};\r\n\r\nexport const elm = {\r\n  name: \"elm\",\r\n  startState: function ()  { return { f: normal() }; },\r\n  copyState:  function (s) { return { f: s.f }; },\r\n\r\n  token: function(stream, state) {\r\n    var type = state.f(stream, function(s) { state.f = s; });\r\n    var word = stream.current();\r\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\r\n  },\r\n\r\n  languageData: {\r\n    commentTokens: {line: \"--\"}\r\n  }\r\n};\r\n"],
  "mappings": ";AAAA,SAAS,YAAY,QAAQ,UAAU,GACvC;AACE,WAAS,CAAC;AACV,SAAO,EAAE,QAAQ,QAAQ;AAC3B;AAEA,IAAI,UAAU;AACd,IAAI,UAAU;AACd,IAAI,UAAU;AAEd,IAAI,UAAU;AACd,IAAI,QAAQ;AACZ,IAAI,WAAW;AACf,IAAI,YAAY;AAChB,IAAI,WAAW;AAEf,SAAS,SACT;AACE,SAAO,SAAS,QAAQ,UACxB;AACE,QAAI,OAAO,SAAS,QAAQ,GAC5B;AACE,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,OAAO,KAAK;AAEvB,QAAI,UAAU,KAAK,IAAI,GACvB;AACE,aAAQ,SAAS,OAAO,OAAO,IAAI,GAAG,IAClC,YAAY,QAAQ,UAAU,kBAAkB,CAAC,CAAC,IACjD,SAAS,OAAO,OAAO,MAAM,OAAO,IACrC,YAAY,QAAQ,UAAU,SAAS,IACvC;AAAA,IACN;AAEA,QAAI,SAAS,KACb;AACE,aAAO,YAAY,QAAQ,UAAU,SAAS;AAAA,IAChD;AAEA,QAAI,SAAS,KACb;AACE,aAAO,OAAO,IAAI,GAAG,IACjB,OAAO,IAAI,GAAG,IACd,YAAY,QAAQ,UAAU,gBAAgB,IAC9C,WACF,YAAY,QAAQ,UAAU,iBAAiB;AAAA,IACnD;AAEA,QAAI,QAAQ,KAAK,IAAI,GACrB;AACE,aAAO,SAAS,OAAO;AACvB,aAAO;AAAA,IACT;AAEA,QAAI,QAAQ,KAAK,IAAI,GACrB;AACE,UAAI,QAAQ,OAAO,QAAQ;AAC3B,aAAO,SAAS,OAAO;AACvB,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAEA,QAAI,QAAQ,KAAK,IAAI,GACrB;AACE,UAAI,SAAS,KACb;AACE,YAAI,OAAO,IAAI,MAAM,GACrB;AACE,iBAAO,SAAS,KAAK;AACrB,iBAAO;AAAA,QACT;AAAA,MACF,OAEA;AACE,eAAO,SAAS,OAAO;AAAA,MACzB;AACA,UAAI,OAAO,IAAI,GAAG,GAClB;AACE,eAAO,SAAS,OAAO;AAAA,MACzB;AACA,UAAI,OAAO,IAAI,MAAM,GACrB;AACE,eAAO,IAAI,MAAM;AACjB,eAAO,SAAS,OAAO;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,KAAK,IAAI,GACtB;AACE,UAAI,SAAS,OAAO,OAAO,IAAI,GAAG,GAClC;AACE,eAAO,UAAU;AACjB,eAAO;AAAA,MACT;AACA,aAAO,SAAS,QAAQ;AACxB,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,KACb;AACE,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AACF;AAEA,SAAS,kBAAkB,MAC3B;AACE,MAAI,QAAQ,GACZ;AACE,WAAO,OAAO;AAAA,EAChB;AACA,SAAO,SAAS,QAAQ,UACxB;AACE,WAAO,CAAC,OAAO,IAAI,GACnB;AACE,UAAI,OAAO,OAAO,KAAK;AACvB,UAAI,QAAQ,OAAO,OAAO,IAAI,GAAG,GACjC;AACE,UAAE;AAAA,MACJ,WACS,QAAQ,OAAO,OAAO,IAAI,GAAG,GACtC;AACE,UAAE;AACF,YAAI,SAAS,GACb;AACE,mBAAS,OAAO,CAAC;AACjB,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,aAAS,kBAAkB,IAAI,CAAC;AAChC,WAAO;AAAA,EACT;AACF;AAEA,SAAS,iBAAiB,QAAQ,UAClC;AACE,SAAO,CAAC,OAAO,IAAI,GACnB;AACE,QAAI,OAAO,OAAO,KAAK;AACvB,QAAI,SAAS,OAAO,OAAO,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,GACrD;AACE,eAAS,OAAO,CAAC;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAEA,SAAS,kBAAkB,QAAQ,UACnC;AACE,SAAO,OAAO,OAAO,KAAK,GAAG;AAAE,WAAO,KAAK;AAAG,WAAO,KAAK;AAAA,EAAG;AAC7D,MAAI,OAAO,OAAO,GAAG,GACrB;AACE,WAAO,KAAK;AACZ,aAAS,OAAO,CAAC;AACjB,WAAO;AAAA,EACT;AACA,SAAO,UAAU;AACjB,WAAS,OAAO,CAAC;AACjB,SAAO;AACT;AAEA,SAAS,UAAU,QAAQ,UAC3B;AACE,SAAO,OAAO,OAAO,KAAK,GAAG;AAAE,WAAO,KAAK;AAAG,WAAO,KAAK;AAAA,EAAG;AAC7D,MAAI,OAAO,OAAO,GAAG,GACrB;AACE,WAAO,KAAK;AACZ,aAAS,OAAO,CAAC;AACjB,WAAO;AAAA,EACT;AACA,SAAO,UAAU;AACjB,WAAS,OAAO,CAAC;AACjB,SAAO;AACT;AAEA,SAAS,UAAU,QAAQ,UAC3B;AACE,SAAO,CAAC,OAAO,IAAI,GACnB;AACE,QAAI,OAAO,OAAO,KAAK;AACvB,QAAI,SAAS,OAAO,OAAO,IAAI,GAAG,GAClC;AACE,eAAS,OAAO,CAAC;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAEA,IAAI,iBAAiB;AAAA,EACnB,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,MAAM;AAAA,EACN,KAAK;AAAA,EACH,IAAI;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,MAAM;AACR;AAEO,IAAM,MAAM;AAAA,EACjB,MAAM;AAAA,EACN,YAAY,WAAa;AAAE,WAAO,EAAE,GAAG,OAAO,EAAE;AAAA,EAAG;AAAA,EACnD,WAAY,SAAU,GAAG;AAAE,WAAO,EAAE,GAAG,EAAE,EAAE;AAAA,EAAG;AAAA,EAE9C,OAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,OAAO,MAAM,EAAE,QAAQ,SAAS,GAAG;AAAE,YAAM,IAAI;AAAA,IAAG,CAAC;AACvD,QAAI,OAAO,OAAO,QAAQ;AAC1B,WAAQ,eAAe,eAAe,IAAI,IAAK,YAAY;AAAA,EAC7D;AAAA,EAEA,cAAc;AAAA,IACZ,eAAe,EAAC,MAAM,KAAI;AAAA,EAC5B;AACF;",
  "names": []
}
