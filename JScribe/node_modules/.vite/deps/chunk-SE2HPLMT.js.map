{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/erlang.js"],
  "sourcesContent": ["/////////////////////////////////////////////////////////////////////////////\r\n// constants\r\n\r\nvar typeWords = [\r\n  \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\r\n\r\nvar keywordWords = [\r\n  \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\r\n  \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\r\n\r\nvar separatorRE    = /[\\->,;]/;\r\nvar separatorWords = [\r\n  \"->\",\";\",\",\"];\r\n\r\nvar operatorAtomWords = [\r\n  \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\r\n  \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\r\n\r\nvar operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\r\nvar operatorSymbolWords = [\r\n  \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\r\n\r\nvar openParenRE    = /[<\\(\\[\\{]/;\r\nvar openParenWords = [\r\n  \"<<\",\"(\",\"[\",\"{\"];\r\n\r\nvar closeParenRE    = /[>\\)\\]\\}]/;\r\nvar closeParenWords = [\r\n  \"}\",\"]\",\")\",\">>\"];\r\n\r\nvar guardWords = [\r\n  \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\r\n  \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\r\n  \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\r\n  \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\r\n  \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\r\n\r\nvar bifWords = [\r\n  \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\r\n  \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\r\n  \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\r\n  \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\r\n  \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\r\n  \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\r\n  \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\r\n  \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\r\n  \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\r\n  \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\r\n  \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\r\n  \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\r\n  \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\r\n  \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\r\n  \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\r\n  \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\r\n  \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\r\n  \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\r\n  \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\r\n  \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\r\n  \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\r\n  \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\r\n\r\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\r\n// lower case: [a-z] [ß-ö] [ø-ÿ]\r\nvar anumRE       = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\r\nvar escapesRE    =\r\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n// tokenizer\r\n\r\nfunction tokenizer(stream,state) {\r\n  // in multi-line string\r\n  if (state.in_string) {\r\n    state.in_string = (!doubleQuote(stream));\r\n    return rval(state,stream,\"string\");\r\n  }\r\n\r\n  // in multi-line atom\r\n  if (state.in_atom) {\r\n    state.in_atom = (!singleQuote(stream));\r\n    return rval(state,stream,\"atom\");\r\n  }\r\n\r\n  // whitespace\r\n  if (stream.eatSpace()) {\r\n    return rval(state,stream,\"whitespace\");\r\n  }\r\n\r\n  // attributes and type specs\r\n  if (!peekToken(state) &&\r\n      stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\r\n    if (is_member(stream.current(),typeWords)) {\r\n      return rval(state,stream,\"type\");\r\n    }else{\r\n      return rval(state,stream,\"attribute\");\r\n    }\r\n  }\r\n\r\n  var ch = stream.next();\r\n\r\n  // comment\r\n  if (ch == '%') {\r\n    stream.skipToEnd();\r\n    return rval(state,stream,\"comment\");\r\n  }\r\n\r\n  // colon\r\n  if (ch == \":\") {\r\n    return rval(state,stream,\"colon\");\r\n  }\r\n\r\n  // macro\r\n  if (ch == '?') {\r\n    stream.eatSpace();\r\n    stream.eatWhile(anumRE);\r\n    return rval(state,stream,\"macro\");\r\n  }\r\n\r\n  // record\r\n  if (ch == \"#\") {\r\n    stream.eatSpace();\r\n    stream.eatWhile(anumRE);\r\n    return rval(state,stream,\"record\");\r\n  }\r\n\r\n  // dollar escape\r\n  if (ch == \"$\") {\r\n    if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\r\n      return rval(state,stream,\"error\");\r\n    }\r\n    return rval(state,stream,\"number\");\r\n  }\r\n\r\n  // dot\r\n  if (ch == \".\") {\r\n    return rval(state,stream,\"dot\");\r\n  }\r\n\r\n  // quoted atom\r\n  if (ch == '\\'') {\r\n    if (!(state.in_atom = (!singleQuote(stream)))) {\r\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\r\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\r\n        return rval(state,stream,\"fun\");      // 'f'/0 style fun\r\n      }\r\n      if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\r\n        return rval(state,stream,\"function\");\r\n      }\r\n    }\r\n    return rval(state,stream,\"atom\");\r\n  }\r\n\r\n  // string\r\n  if (ch == '\"') {\r\n    state.in_string = (!doubleQuote(stream));\r\n    return rval(state,stream,\"string\");\r\n  }\r\n\r\n  // variable\r\n  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\r\n    stream.eatWhile(anumRE);\r\n    return rval(state,stream,\"variable\");\r\n  }\r\n\r\n  // atom/keyword/BIF/function\r\n  if (/[a-z_ß-öø-ÿ]/.test(ch)) {\r\n    stream.eatWhile(anumRE);\r\n\r\n    if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\r\n      stream.match(/\\s*\\/\\s*[0-9]/,true);\r\n      return rval(state,stream,\"fun\");      // f/0 style fun\r\n    }\r\n\r\n    var w = stream.current();\r\n\r\n    if (is_member(w,keywordWords)) {\r\n      return rval(state,stream,\"keyword\");\r\n    }else if (is_member(w,operatorAtomWords)) {\r\n      return rval(state,stream,\"operator\");\r\n    }else if (stream.match(/\\s*\\(/,false)) {\r\n      // 'put' and 'erlang:put' are bifs, 'foo:put' is not\r\n      if (is_member(w,bifWords) &&\r\n          ((peekToken(state).token != \":\") ||\r\n           (peekToken(state,2).token == \"erlang\"))) {\r\n        return rval(state,stream,\"builtin\");\r\n      }else if (is_member(w,guardWords)) {\r\n        return rval(state,stream,\"guard\");\r\n      }else{\r\n        return rval(state,stream,\"function\");\r\n      }\r\n    }else if (lookahead(stream) == \":\") {\r\n      if (w == \"erlang\") {\r\n        return rval(state,stream,\"builtin\");\r\n      } else {\r\n        return rval(state,stream,\"function\");\r\n      }\r\n    }else if (is_member(w,[\"true\",\"false\"])) {\r\n      return rval(state,stream,\"boolean\");\r\n    }else{\r\n      return rval(state,stream,\"atom\");\r\n    }\r\n  }\r\n\r\n  // number\r\n  var digitRE      = /[0-9]/;\r\n  var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\r\n  if (digitRE.test(ch)) {\r\n    stream.eatWhile(digitRE);\r\n    if (stream.eat('#')) {                // 36#aZ  style integer\r\n      if (!stream.eatWhile(radixRE)) {\r\n        stream.backUp(1);                 //\"36#\" - syntax error\r\n      }\r\n    } else if (stream.eat('.')) {       // float\r\n      if (!stream.eatWhile(digitRE)) {\r\n        stream.backUp(1);        // \"3.\" - probably end of function\r\n      } else {\r\n        if (stream.eat(/[eE]/)) {        // float with exponent\r\n          if (stream.eat(/[-+]/)) {\r\n            if (!stream.eatWhile(digitRE)) {\r\n              stream.backUp(2);            // \"2e-\" - syntax error\r\n            }\r\n          } else {\r\n            if (!stream.eatWhile(digitRE)) {\r\n              stream.backUp(1);            // \"2e\" - syntax error\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rval(state,stream,\"number\");   // normal integer\r\n  }\r\n\r\n  // open parens\r\n  if (nongreedy(stream,openParenRE,openParenWords)) {\r\n    return rval(state,stream,\"open_paren\");\r\n  }\r\n\r\n  // close parens\r\n  if (nongreedy(stream,closeParenRE,closeParenWords)) {\r\n    return rval(state,stream,\"close_paren\");\r\n  }\r\n\r\n  // separators\r\n  if (greedy(stream,separatorRE,separatorWords)) {\r\n    return rval(state,stream,\"separator\");\r\n  }\r\n\r\n  // operators\r\n  if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\r\n    return rval(state,stream,\"operator\");\r\n  }\r\n\r\n  return rval(state,stream,null);\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n// utilities\r\nfunction nongreedy(stream,re,words) {\r\n  if (stream.current().length == 1 && re.test(stream.current())) {\r\n    stream.backUp(1);\r\n    while (re.test(stream.peek())) {\r\n      stream.next();\r\n      if (is_member(stream.current(),words)) {\r\n        return true;\r\n      }\r\n    }\r\n    stream.backUp(stream.current().length-1);\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction greedy(stream,re,words) {\r\n  if (stream.current().length == 1 && re.test(stream.current())) {\r\n    while (re.test(stream.peek())) {\r\n      stream.next();\r\n    }\r\n    while (0 < stream.current().length) {\r\n      if (is_member(stream.current(),words)) {\r\n        return true;\r\n      }else{\r\n        stream.backUp(1);\r\n      }\r\n    }\r\n    stream.next();\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction doubleQuote(stream) {\r\n  return quote(stream, '\"', '\\\\');\r\n}\r\n\r\nfunction singleQuote(stream) {\r\n  return quote(stream,'\\'','\\\\');\r\n}\r\n\r\nfunction quote(stream,quoteChar,escapeChar) {\r\n  while (!stream.eol()) {\r\n    var ch = stream.next();\r\n    if (ch == quoteChar) {\r\n      return true;\r\n    }else if (ch == escapeChar) {\r\n      stream.next();\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction lookahead(stream) {\r\n  var m = stream.match(/^\\s*([^\\s%])/, false)\r\n  return m ? m[1] : \"\";\r\n}\r\n\r\nfunction is_member(element,list) {\r\n  return (-1 < list.indexOf(element));\r\n}\r\n\r\nfunction rval(state,stream,type) {\r\n\r\n  // parse stack\r\n  pushToken(state,realToken(type,stream));\r\n\r\n  // map erlang token type to CodeMirror style class\r\n  //     erlang             -> CodeMirror tag\r\n  switch (type) {\r\n  case \"atom\":        return \"atom\";\r\n  case \"attribute\":   return \"attribute\";\r\n  case \"boolean\":     return \"atom\";\r\n  case \"builtin\":     return \"builtin\";\r\n  case \"close_paren\": return null;\r\n  case \"colon\":       return null;\r\n  case \"comment\":     return \"comment\";\r\n  case \"dot\":         return null;\r\n  case \"error\":       return \"error\";\r\n  case \"fun\":         return \"meta\";\r\n  case \"function\":    return \"tag\";\r\n  case \"guard\":       return \"property\";\r\n  case \"keyword\":     return \"keyword\";\r\n  case \"macro\":       return \"macroName\";\r\n  case \"number\":      return \"number\";\r\n  case \"open_paren\":  return null;\r\n  case \"operator\":    return \"operator\";\r\n  case \"record\":      return \"bracket\";\r\n  case \"separator\":   return null;\r\n  case \"string\":      return \"string\";\r\n  case \"type\":        return \"def\";\r\n  case \"variable\":    return \"variable\";\r\n  default:            return null;\r\n  }\r\n}\r\n\r\nfunction aToken(tok,col,ind,typ) {\r\n  return {token:  tok,\r\n          column: col,\r\n          indent: ind,\r\n          type:   typ};\r\n}\r\n\r\nfunction realToken(type,stream) {\r\n  return aToken(stream.current(),\r\n                stream.column(),\r\n                stream.indentation(),\r\n                type);\r\n}\r\n\r\nfunction fakeToken(type) {\r\n  return aToken(type,0,0,type);\r\n}\r\n\r\nfunction peekToken(state,depth) {\r\n  var len = state.tokenStack.length;\r\n  var dep = (depth ? depth : 1);\r\n\r\n  if (len < dep) {\r\n    return false;\r\n  }else{\r\n    return state.tokenStack[len-dep];\r\n  }\r\n}\r\n\r\nfunction pushToken(state,token) {\r\n\r\n  if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\r\n    state.tokenStack = maybe_drop_pre(state.tokenStack,token);\r\n    state.tokenStack = maybe_drop_post(state.tokenStack);\r\n  }\r\n}\r\n\r\nfunction maybe_drop_pre(s,token) {\r\n  var last = s.length-1;\r\n\r\n  if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\r\n    s.pop();\r\n  }else if (0 < last && s[last].type === \"group\") {\r\n    s.pop();\r\n    s.push(token);\r\n  }else{\r\n    s.push(token);\r\n  }\r\n  return s;\r\n}\r\n\r\nfunction maybe_drop_post(s) {\r\n  if (!s.length) return s\r\n  var last = s.length-1;\r\n\r\n  if (s[last].type === \"dot\") {\r\n    return [];\r\n  }\r\n  if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\r\n    return s.slice(0,last-1);\r\n  }\r\n  switch (s[last].token) {\r\n  case \"}\":    return d(s,{g:[\"{\"]});\r\n  case \"]\":    return d(s,{i:[\"[\"]});\r\n  case \")\":    return d(s,{i:[\"(\"]});\r\n  case \">>\":   return d(s,{i:[\"<<\"]});\r\n  case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\r\n  case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\r\n                              \",\",\"(\",\"[\",\"{\",\"<<\"]});\r\n  case \"->\":   return d(s,{r:[\"when\"],\r\n                           m:[\"try\",\"if\",\"case\",\"receive\"]});\r\n  case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\r\n  case \"catch\":return d(s,{e:[\"try\"]});\r\n  case \"of\":   return d(s,{e:[\"case\"]});\r\n  case \"after\":return d(s,{e:[\"receive\",\"try\"]});\r\n  default:     return s;\r\n  }\r\n}\r\n\r\nfunction d(stack,tt) {\r\n  // stack is a stack of Token objects.\r\n  // tt is an object; {type:tokens}\r\n  // type is a char, tokens is a list of token strings.\r\n  // The function returns (possibly truncated) stack.\r\n  // It will descend the stack, looking for a Token such that Token.token\r\n  //  is a member of tokens. If it does not find that, it will normally (but\r\n  //  see \"E\" below) return stack. If it does find a match, it will remove\r\n  //  all the Tokens between the top and the matched Token.\r\n  // If type is \"m\", that is all it does.\r\n  // If type is \"i\", it will also remove the matched Token and the top Token.\r\n  // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\r\n  // If type is \"r\", it will remove the matched Token, but not the top Token.\r\n  // If type is \"e\", it will keep the matched Token but not the top Token.\r\n  // If type is \"E\", it behaves as for type \"e\", except if there is no match,\r\n  //  in which case it will return an empty stack.\r\n\r\n  for (var type in tt) {\r\n    var len = stack.length-1;\r\n    var tokens = tt[type];\r\n    for (var i = len-1; -1 < i ; i--) {\r\n      if (is_member(stack[i].token,tokens)) {\r\n        var ss = stack.slice(0,i);\r\n        switch (type) {\r\n        case \"m\": return ss.concat(stack[i]).concat(stack[len]);\r\n        case \"r\": return ss.concat(stack[len]);\r\n        case \"i\": return ss;\r\n        case \"g\": return ss.concat(fakeToken(\"group\"));\r\n        case \"E\": return ss.concat(stack[i]);\r\n        case \"e\": return ss.concat(stack[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (type == \"E\" ? [] : stack);\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n// indenter\r\n\r\nfunction indenter(state, textAfter, cx) {\r\n  var t;\r\n  var wordAfter = wordafter(textAfter);\r\n  var currT = peekToken(state,1);\r\n  var prevT = peekToken(state,2);\r\n\r\n  if (state.in_string || state.in_atom) {\r\n    return null;\r\n  }else if (!prevT) {\r\n    return 0;\r\n  }else if (currT.token == \"when\") {\r\n    return currT.column + cx.unit;\r\n  }else if (wordAfter === \"when\" && prevT.type === \"function\") {\r\n    return prevT.indent+cx.unit;\r\n  }else if (wordAfter === \"(\" && currT.token === \"fun\") {\r\n    return  currT.column+3;\r\n  }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\r\n    return t.column;\r\n  }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\r\n    t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\r\n    return t ? t.column : null;\r\n  }else if (is_member(wordAfter,closeParenWords)) {\r\n    t = getToken(state,openParenWords);\r\n    return t ? t.column : null;\r\n  }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\r\n            is_member(wordAfter,[\",\",\"|\",\"||\"])) {\r\n    t = postcommaToken(state);\r\n    return t ? t.column+t.token.length : cx.unit;\r\n  }else if (currT.token == \"->\") {\r\n    if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\r\n      return prevT.column+cx.unit+cx.unit;\r\n    }else{\r\n      return prevT.column+cx.unit;\r\n    }\r\n  }else if (is_member(currT.token,openParenWords)) {\r\n    return currT.column+currT.token.length;\r\n  }else{\r\n    t = defaultToken(state);\r\n    return truthy(t) ? t.column+cx.unit : 0;\r\n  }\r\n}\r\n\r\nfunction wordafter(str) {\r\n  var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\r\n\r\n  return truthy(m) && (m.index === 0) ? m[0] : \"\";\r\n}\r\n\r\nfunction postcommaToken(state) {\r\n  var objs = state.tokenStack.slice(0,-1);\r\n  var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\r\n\r\n  return truthy(objs[i]) ? objs[i] : false;\r\n}\r\n\r\nfunction defaultToken(state) {\r\n  var objs = state.tokenStack;\r\n  var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\r\n  var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\r\n\r\n  if (truthy(stop) && truthy(oper) && stop < oper) {\r\n    return objs[stop+1];\r\n  } else if (truthy(stop)) {\r\n    return objs[stop];\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getToken(state,tokens) {\r\n  var objs = state.tokenStack;\r\n  var i = getTokenIndex(objs,\"token\",tokens);\r\n\r\n  return truthy(objs[i]) ? objs[i] : false;\r\n}\r\n\r\nfunction getTokenIndex(objs,propname,propvals) {\r\n\r\n  for (var i = objs.length-1; -1 < i ; i--) {\r\n    if (is_member(objs[i][propname],propvals)) {\r\n      return i;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction truthy(x) {\r\n  return (x !== false) && (x != null);\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n// this object defines the mode\r\n\r\nexport const erlang = {\r\n  name: \"erlang\",\r\n  startState() {\r\n    return {tokenStack: [],\r\n            in_string:  false,\r\n            in_atom:    false};\r\n  },\r\n\r\n  token: tokenizer,\r\n\r\n  indent: indenter,\r\n\r\n  languageData: {\r\n    commentTokens: {line: \"%\"}\r\n  }\r\n};\r\n\r\n"],
  "mappings": "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",
  "names": []
}
