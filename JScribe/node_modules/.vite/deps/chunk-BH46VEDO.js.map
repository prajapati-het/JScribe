{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/oz.js"],
  "sourcesContent": ["function wordRegexp(words) {\r\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\r\n}\r\n\r\nvar singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\r\nvar doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\r\nvar tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\r\n\r\nvar middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\r\n              \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\r\nvar end = [\"end\"];\r\n\r\nvar atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\r\nvar commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\r\n                                 \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\r\nvar openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\r\n                                  \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\r\nvar middleKeywords = wordRegexp(middle);\r\nvar endKeywords = wordRegexp(end);\r\n\r\n// Tokenizers\r\nfunction tokenBase(stream, state) {\r\n  if (stream.eatSpace()) {\r\n    return null;\r\n  }\r\n\r\n  // Brackets\r\n  if(stream.match(/[{}]/)) {\r\n    return \"bracket\";\r\n  }\r\n\r\n  // Special [] keyword\r\n  if (stream.match('[]')) {\r\n    return \"keyword\"\r\n  }\r\n\r\n  // Operators\r\n  if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\r\n    return \"operator\";\r\n  }\r\n\r\n  // Atoms\r\n  if(stream.match(atoms)) {\r\n    return 'atom';\r\n  }\r\n\r\n  // Opening keywords\r\n  var matched = stream.match(openingKeywords);\r\n  if (matched) {\r\n    if (!state.doInCurrentLine)\r\n      state.currentIndent++;\r\n    else\r\n      state.doInCurrentLine = false;\r\n\r\n    // Special matching for signatures\r\n    if(matched[0] == \"proc\" || matched[0] == \"fun\")\r\n      state.tokenize = tokenFunProc;\r\n    else if(matched[0] == \"class\")\r\n      state.tokenize = tokenClass;\r\n    else if(matched[0] == \"meth\")\r\n      state.tokenize = tokenMeth;\r\n\r\n    return 'keyword';\r\n  }\r\n\r\n  // Middle and other keywords\r\n  if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\r\n    return \"keyword\"\r\n  }\r\n\r\n  // End keywords\r\n  if (stream.match(endKeywords)) {\r\n    state.currentIndent--;\r\n    return 'keyword';\r\n  }\r\n\r\n  // Eat the next char for next comparisons\r\n  var ch = stream.next();\r\n\r\n  // Strings\r\n  if (ch == '\"' || ch == \"'\") {\r\n    state.tokenize = tokenString(ch);\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  // Numbers\r\n  if (/[~\\d]/.test(ch)) {\r\n    if (ch == \"~\") {\r\n      if(! /^[0-9]/.test(stream.peek()))\r\n        return null;\r\n      else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\r\n        return \"number\";\r\n    }\r\n\r\n    if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\r\n      return \"number\";\r\n\r\n    return null;\r\n  }\r\n\r\n  // Comments\r\n  if (ch == \"%\") {\r\n    stream.skipToEnd();\r\n    return 'comment';\r\n  }\r\n  else if (ch == \"/\") {\r\n    if (stream.eat(\"*\")) {\r\n      state.tokenize = tokenComment;\r\n      return tokenComment(stream, state);\r\n    }\r\n  }\r\n\r\n  // Single operators\r\n  if(singleOperators.test(ch)) {\r\n    return \"operator\";\r\n  }\r\n\r\n  // If nothing match, we skip the entire alphanumerical block\r\n  stream.eatWhile(/\\w/);\r\n\r\n  return \"variable\";\r\n}\r\n\r\nfunction tokenClass(stream, state) {\r\n  if (stream.eatSpace()) {\r\n    return null;\r\n  }\r\n  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\r\n  state.tokenize = tokenBase;\r\n  return \"type\"\r\n}\r\n\r\nfunction tokenMeth(stream, state) {\r\n  if (stream.eatSpace()) {\r\n    return null;\r\n  }\r\n  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\r\n  state.tokenize = tokenBase;\r\n  return \"def\"\r\n}\r\n\r\nfunction tokenFunProc(stream, state) {\r\n  if (stream.eatSpace()) {\r\n    return null;\r\n  }\r\n\r\n  if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\r\n    state.hasPassedFirstStage = true;\r\n    return \"bracket\";\r\n  }\r\n  else if(state.hasPassedFirstStage) {\r\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\r\n    state.hasPassedFirstStage = false;\r\n    state.tokenize = tokenBase;\r\n    return \"def\"\r\n  }\r\n  else {\r\n    state.tokenize = tokenBase;\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"/\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function (stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) {\r\n        end = true;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end || !escaped)\r\n      state.tokenize = tokenBase;\r\n    return \"string\";\r\n  };\r\n}\r\n\r\nfunction buildElectricInputRegEx() {\r\n  // Reindentation should occur on [] or on a match of any of\r\n  // the block closing keywords, at the end of a line.\r\n  var allClosings = middle.concat(end);\r\n  return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\r\n}\r\n\r\nexport const oz = {\r\n  name: \"oz\",\r\n\r\n  startState: function () {\r\n    return {\r\n      tokenize: tokenBase,\r\n      currentIndent: 0,\r\n      doInCurrentLine: false,\r\n      hasPassedFirstStage: false\r\n    };\r\n  },\r\n\r\n  token: function (stream, state) {\r\n    if (stream.sol())\r\n      state.doInCurrentLine = 0;\r\n\r\n    return state.tokenize(stream, state);\r\n  },\r\n\r\n  indent: function (state, textAfter, cx) {\r\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\r\n\r\n    if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\r\n      return cx.unit * (state.currentIndent - 1);\r\n\r\n    if (state.currentIndent < 0)\r\n      return 0;\r\n\r\n    return state.currentIndent * cx.unit\r\n  },\r\n\r\n  languageData: {\r\n    indentOnInut: buildElectricInputRegEx(),\r\n    commentTokens: {line: \"%\", block: {open: \"/*\", close: \"*/\"}}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["end"]
}
