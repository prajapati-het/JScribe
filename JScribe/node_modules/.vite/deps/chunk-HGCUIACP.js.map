{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/dylan.js"],
  "sourcesContent": ["function forEach(arr, f) {\r\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\r\n}\r\nfunction some(arr, f) {\r\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\r\n  return false\r\n}\r\n\r\n// Words\r\nvar words = {\r\n  // Words that introduce unnamed definitions like \"define interface\"\r\n  unnamedDefinition: [\"interface\"],\r\n\r\n  // Words that introduce simple named definitions like \"define library\"\r\n  namedDefinition: [\"module\", \"library\", \"macro\",\r\n                    \"C-struct\", \"C-union\",\r\n                    \"C-function\", \"C-callable-wrapper\"\r\n                   ],\r\n\r\n  // Words that introduce type definitions like \"define class\".\r\n  // These are also parameterized like \"define method\" and are\r\n  // appended to otherParameterizedDefinitionWords\r\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\r\n\r\n  // Words that introduce trickier definitions like \"define method\".\r\n  // These require special definitions to be added to startExpressions\r\n  otherParameterizedDefinition: [\"method\", \"function\",\r\n                                 \"C-variable\", \"C-address\"\r\n                                ],\r\n\r\n  // Words that introduce module constant definitions.\r\n  // These must also be simple definitions and are\r\n  // appended to otherSimpleDefinitionWords\r\n  constantSimpleDefinition: [\"constant\"],\r\n\r\n  // Words that introduce module variable definitions.\r\n  // These must also be simple definitions and are\r\n  // appended to otherSimpleDefinitionWords\r\n  variableSimpleDefinition: [\"variable\"],\r\n\r\n  // Other words that introduce simple definitions\r\n  // (without implicit bodies).\r\n  otherSimpleDefinition: [\"generic\", \"domain\",\r\n                          \"C-pointer-type\",\r\n                          \"table\"\r\n                         ],\r\n\r\n  // Words that begin statements with implicit bodies.\r\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\r\n              \"for\", \"select\", \"when\", \"unless\", \"until\",\r\n              \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\r\n             ],\r\n\r\n  // Patterns that act as separators in compound statements.\r\n  // This may include any general pattern that must be indented\r\n  // specially.\r\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\r\n              \"elseif\", \"afterwards\"\r\n             ],\r\n\r\n  // Keywords that do not require special indentation handling,\r\n  // but which should be highlighted\r\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\r\n          \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\r\n          \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\r\n         ],\r\n\r\n  // Condition signaling function calls\r\n  signalingCalls: [\"signal\", \"error\", \"cerror\",\r\n                   \"break\", \"check-type\", \"abort\"\r\n                  ]\r\n};\r\n\r\nwords[\"otherDefinition\"] =\r\n  words[\"unnamedDefinition\"]\r\n  .concat(words[\"namedDefinition\"])\r\n  .concat(words[\"otherParameterizedDefinition\"]);\r\n\r\nwords[\"definition\"] =\r\n  words[\"typeParameterizedDefinition\"]\r\n  .concat(words[\"otherDefinition\"]);\r\n\r\nwords[\"parameterizedDefinition\"] =\r\n  words[\"typeParameterizedDefinition\"]\r\n  .concat(words[\"otherParameterizedDefinition\"]);\r\n\r\nwords[\"simpleDefinition\"] =\r\n  words[\"constantSimpleDefinition\"]\r\n  .concat(words[\"variableSimpleDefinition\"])\r\n  .concat(words[\"otherSimpleDefinition\"]);\r\n\r\nwords[\"keyword\"] =\r\n  words[\"statement\"]\r\n  .concat(words[\"separator\"])\r\n  .concat(words[\"other\"]);\r\n\r\n// Patterns\r\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\r\nvar symbol = new RegExp(\"^\" + symbolPattern);\r\nvar patterns = {\r\n  // Symbols with special syntax\r\n  symbolKeyword: symbolPattern + \":\",\r\n  symbolClass: \"<\" + symbolPattern + \">\",\r\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\r\n  symbolConstant: \"\\\\$\" + symbolPattern\r\n};\r\nvar patternStyles = {\r\n  symbolKeyword: \"atom\",\r\n  symbolClass: \"tag\",\r\n  symbolGlobal: \"variableName.standard\",\r\n  symbolConstant: \"variableName.constant\"\r\n};\r\n\r\n// Compile all patterns to regular expressions\r\nfor (var patternName in patterns)\r\n  if (patterns.hasOwnProperty(patternName))\r\n    patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\r\n\r\n// Names beginning \"with-\" and \"without-\" are commonly\r\n// used as statement macro\r\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\r\n\r\nvar styles = {};\r\nstyles[\"keyword\"] = \"keyword\";\r\nstyles[\"definition\"] = \"def\";\r\nstyles[\"simpleDefinition\"] = \"def\";\r\nstyles[\"signalingCalls\"] = \"builtin\";\r\n\r\n// protected words lookup table\r\nvar wordLookup = {};\r\nvar styleLookup = {};\r\n\r\nforEach([\r\n  \"keyword\",\r\n  \"definition\",\r\n  \"simpleDefinition\",\r\n  \"signalingCalls\"\r\n], function(type) {\r\n  forEach(words[type], function(word) {\r\n    wordLookup[word] = type;\r\n    styleLookup[word] = styles[type];\r\n  });\r\n});\r\n\r\n\r\nfunction chain(stream, state, f) {\r\n  state.tokenize = f;\r\n  return f(stream, state);\r\n}\r\n\r\nfunction tokenBase(stream, state) {\r\n  // String\r\n  var ch = stream.peek();\r\n  if (ch == \"'\" || ch == '\"') {\r\n    stream.next();\r\n    return chain(stream, state, tokenString(ch, \"string\"));\r\n  }\r\n  // Comment\r\n  else if (ch == \"/\") {\r\n    stream.next();\r\n    if (stream.eat(\"*\")) {\r\n      return chain(stream, state, tokenComment);\r\n    } else if (stream.eat(\"/\")) {\r\n      stream.skipToEnd();\r\n      return \"comment\";\r\n    }\r\n    stream.backUp(1);\r\n  }\r\n  // Decimal\r\n  else if (/[+\\-\\d\\.]/.test(ch)) {\r\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\r\n        stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\r\n        stream.match(/^[+-]?\\d+/)) {\r\n      return \"number\";\r\n    }\r\n  }\r\n  // Hash\r\n  else if (ch == \"#\") {\r\n    stream.next();\r\n    // Symbol with string syntax\r\n    ch = stream.peek();\r\n    if (ch == '\"') {\r\n      stream.next();\r\n      return chain(stream, state, tokenString('\"', \"string\"));\r\n    }\r\n    // Binary number\r\n    else if (ch == \"b\") {\r\n      stream.next();\r\n      stream.eatWhile(/[01]/);\r\n      return \"number\";\r\n    }\r\n    // Hex number\r\n    else if (ch == \"x\") {\r\n      stream.next();\r\n      stream.eatWhile(/[\\da-f]/i);\r\n      return \"number\";\r\n    }\r\n    // Octal number\r\n    else if (ch == \"o\") {\r\n      stream.next();\r\n      stream.eatWhile(/[0-7]/);\r\n      return \"number\";\r\n    }\r\n    // Token concatenation in macros\r\n    else if (ch == '#') {\r\n      stream.next();\r\n      return \"punctuation\";\r\n    }\r\n    // Sequence literals\r\n    else if ((ch == '[') || (ch == '(')) {\r\n      stream.next();\r\n      return \"bracket\";\r\n      // Hash symbol\r\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\r\n      return \"atom\";\r\n    } else {\r\n      stream.eatWhile(/[-a-zA-Z]/);\r\n      return \"error\";\r\n    }\r\n  } else if (ch == \"~\") {\r\n    stream.next();\r\n    ch = stream.peek();\r\n    if (ch == \"=\") {\r\n      stream.next();\r\n      ch = stream.peek();\r\n      if (ch == \"=\") {\r\n        stream.next();\r\n        return \"operator\";\r\n      }\r\n      return \"operator\";\r\n    }\r\n    return \"operator\";\r\n  } else if (ch == \":\") {\r\n    stream.next();\r\n    ch = stream.peek();\r\n    if (ch == \"=\") {\r\n      stream.next();\r\n      return \"operator\";\r\n    } else if (ch == \":\") {\r\n      stream.next();\r\n      return \"punctuation\";\r\n    }\r\n  } else if (\"[](){}\".indexOf(ch) != -1) {\r\n    stream.next();\r\n    return \"bracket\";\r\n  } else if (\".,\".indexOf(ch) != -1) {\r\n    stream.next();\r\n    return \"punctuation\";\r\n  } else if (stream.match(\"end\")) {\r\n    return \"keyword\";\r\n  }\r\n  for (var name in patterns) {\r\n    if (patterns.hasOwnProperty(name)) {\r\n      var pattern = patterns[name];\r\n      if ((pattern instanceof Array && some(pattern, function(p) {\r\n        return stream.match(p);\r\n      })) || stream.match(pattern))\r\n        return patternStyles[name];\r\n    }\r\n  }\r\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\r\n    stream.next();\r\n    return \"operator\";\r\n  }\r\n  if (stream.match(\"define\")) {\r\n    return \"def\";\r\n  } else {\r\n    stream.eatWhile(/[\\w\\-]/);\r\n    // Keyword\r\n    if (wordLookup.hasOwnProperty(stream.current())) {\r\n      return styleLookup[stream.current()];\r\n    } else if (stream.current().match(symbol)) {\r\n      return \"variable\";\r\n    } else {\r\n      stream.next();\r\n      return \"variableName.standard\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\r\n  while ((ch = stream.next())) {\r\n    if (ch == \"/\" && maybeEnd) {\r\n      if (nestedCount > 0) {\r\n        nestedCount--;\r\n      } else {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n    } else if (ch == \"*\" && maybeNested) {\r\n      nestedCount++;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n    maybeNested = (ch == \"/\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenString(quote, style) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) {\r\n        end = true;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end || !escaped) {\r\n      state.tokenize = tokenBase;\r\n    }\r\n    return style;\r\n  };\r\n}\r\n\r\n// Interface\r\nexport const dylan = {\r\n  name: \"dylan\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      currentIndent: 0\r\n    };\r\n  },\r\n  token: function(stream, state) {\r\n    if (stream.eatSpace())\r\n      return null;\r\n    var style = state.tokenize(stream, state);\r\n    return style;\r\n  },\r\n  languageData: {\r\n    commentTokens: {block: {open: \"/*\", close: \"*/\"}}\r\n  }\r\n};\r\n\r\n"],
  "mappings": "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",
  "names": []
}
