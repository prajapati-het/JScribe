{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/tiddlywiki.js"],
  "sourcesContent": ["// Tokenizer\r\nvar textwords = {};\r\n\r\nvar keywords = {\r\n  \"allTags\": true, \"closeAll\": true, \"list\": true,\r\n  \"newJournal\": true, \"newTiddler\": true,\r\n  \"permaview\": true, \"saveChanges\": true,\r\n  \"search\": true, \"slider\": true, \"tabs\": true,\r\n  \"tag\": true, \"tagging\": true, \"tags\": true,\r\n  \"tiddler\": true, \"timeline\": true,\r\n  \"today\": true, \"version\": true, \"option\": true,\r\n  \"with\": true, \"filter\": true\r\n};\r\n\r\nvar isSpaceName = /[\\w_\\-]/i,\r\n    reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\r\n    reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\r\n    reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\r\n    reBlockQuote = /^<<<$/,\r\n\r\n    reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\r\n    reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\r\n    reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\r\n    reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\r\n\r\n    reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\r\n    reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\r\n\r\n    reUntilCodeStop = /.*?\\}\\}\\}/;\r\n\r\nfunction chain(stream, state, f) {\r\n  state.tokenize = f;\r\n  return f(stream, state);\r\n}\r\n\r\nfunction tokenBase(stream, state) {\r\n  var sol = stream.sol(), ch = stream.peek();\r\n\r\n  state.block = false;        // indicates the start of a code block.\r\n\r\n  // check start of  blocks\r\n  if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\r\n    if (stream.match(reCodeBlockStart)) {\r\n      state.block = true;\r\n      return chain(stream, state, twTokenCode);\r\n    }\r\n    if (stream.match(reBlockQuote))\r\n      return 'quote';\r\n    if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))\r\n      return 'comment';\r\n    if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))\r\n      return 'comment';\r\n    if (stream.match(reHR))\r\n      return 'contentSeparator';\r\n  }\r\n\r\n  stream.next();\r\n  if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\r\n    if (ch == \"!\") { // tw header\r\n      stream.skipToEnd();\r\n      return \"header\";\r\n    }\r\n    if (ch == \"*\") { // tw list\r\n      stream.eatWhile('*');\r\n      return \"comment\";\r\n    }\r\n    if (ch == \"#\") { // tw numbered list\r\n      stream.eatWhile('#');\r\n      return \"comment\";\r\n    }\r\n    if (ch == \";\") { // definition list, term\r\n      stream.eatWhile(';');\r\n      return \"comment\";\r\n    }\r\n    if (ch == \":\") { // definition list, description\r\n      stream.eatWhile(':');\r\n      return \"comment\";\r\n    }\r\n    if (ch == \">\") { // single line quote\r\n      stream.eatWhile(\">\");\r\n      return \"quote\";\r\n    }\r\n    if (ch == '|')\r\n      return 'header';\r\n  }\r\n\r\n  if (ch == '{' && stream.match('{{'))\r\n    return chain(stream, state, twTokenCode);\r\n\r\n  // rudimentary html:// file:// link matching. TW knows much more ...\r\n  if (/[hf]/i.test(ch) &&\r\n      /[ti]/i.test(stream.peek()) &&\r\n      stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i))\r\n    return \"link\";\r\n\r\n  // just a little string indicator, don't want to have the whole string covered\r\n  if (ch == '\"')\r\n    return 'string';\r\n\r\n  if (ch == '~')    // _no_ CamelCase indicator should be bold\r\n    return 'brace';\r\n\r\n  if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\r\n    return 'brace';\r\n\r\n  if (ch == \"@\") {    // check for space link. TODO fix @@...@@ highlighting\r\n    stream.eatWhile(isSpaceName);\r\n    return \"link\";\r\n  }\r\n\r\n  if (/\\d/.test(ch)) {        // numbers\r\n    stream.eatWhile(/\\d/);\r\n    return \"number\";\r\n  }\r\n\r\n  if (ch == \"/\") { // tw invisible comment\r\n    if (stream.eat(\"%\")) {\r\n      return chain(stream, state, twTokenComment);\r\n    } else if (stream.eat(\"/\")) { //\r\n      return chain(stream, state, twTokenEm);\r\n    }\r\n  }\r\n\r\n  if (ch == \"_\" && stream.eat(\"_\")) // tw underline\r\n    return chain(stream, state, twTokenUnderline);\r\n\r\n  // strikethrough and mdash handling\r\n  if (ch == \"-\" && stream.eat(\"-\")) {\r\n    // if strikethrough looks ugly, change CSS.\r\n    if (stream.peek() != ' ')\r\n      return chain(stream, state, twTokenStrike);\r\n    // mdash\r\n    if (stream.peek() == ' ')\r\n      return 'brace';\r\n  }\r\n\r\n  if (ch == \"'\" && stream.eat(\"'\")) // tw bold\r\n    return chain(stream, state, twTokenStrong);\r\n\r\n  if (ch == \"<\" && stream.eat(\"<\")) // tw macro\r\n    return chain(stream, state, twTokenMacro);\r\n\r\n  // core macro handling\r\n  stream.eatWhile(/[\\w\\$_]/);\r\n  return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\r\n}\r\n\r\n// tw invisible comment\r\nfunction twTokenComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"/\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"%\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\n// tw strong / bold\r\nfunction twTokenStrong(stream, state) {\r\n  var maybeEnd = false,\r\n      ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"'\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"'\");\r\n  }\r\n  return \"strong\";\r\n}\r\n\r\n// tw code\r\nfunction twTokenCode(stream, state) {\r\n  var sb = state.block;\r\n\r\n  if (sb && stream.current()) {\r\n    return \"comment\";\r\n  }\r\n\r\n  if (!sb && stream.match(reUntilCodeStop)) {\r\n    state.tokenize = tokenBase;\r\n    return \"comment\";\r\n  }\r\n\r\n  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\r\n    state.tokenize = tokenBase;\r\n    return \"comment\";\r\n  }\r\n\r\n  stream.next();\r\n  return \"comment\";\r\n}\r\n\r\n// tw em / italic\r\nfunction twTokenEm(stream, state) {\r\n  var maybeEnd = false,\r\n      ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"/\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"/\");\r\n  }\r\n  return \"emphasis\";\r\n}\r\n\r\n// tw underlined text\r\nfunction twTokenUnderline(stream, state) {\r\n  var maybeEnd = false,\r\n      ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"_\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"_\");\r\n  }\r\n  return \"link\";\r\n}\r\n\r\n// tw strike through text looks ugly\r\n// change CSS if needed\r\nfunction twTokenStrike(stream, state) {\r\n  var maybeEnd = false, ch;\r\n\r\n  while (ch = stream.next()) {\r\n    if (ch == \"-\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"-\");\r\n  }\r\n  return \"deleted\";\r\n}\r\n\r\n// macro\r\nfunction twTokenMacro(stream, state) {\r\n  if (stream.current() == '<<') {\r\n    return 'meta';\r\n  }\r\n\r\n  var ch = stream.next();\r\n  if (!ch) {\r\n    state.tokenize = tokenBase;\r\n    return null;\r\n  }\r\n  if (ch == \">\") {\r\n    if (stream.peek() == '>') {\r\n      stream.next();\r\n      state.tokenize = tokenBase;\r\n      return \"meta\";\r\n    }\r\n  }\r\n\r\n  stream.eatWhile(/[\\w\\$_]/);\r\n  return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\r\n}\r\n\r\n// Interface\r\nexport const tiddlyWiki = {\r\n  name: \"tiddlywiki\",\r\n\r\n  startState: function () {\r\n    return {tokenize: tokenBase};\r\n  },\r\n\r\n  token: function (stream, state) {\r\n    if (stream.eatSpace()) return null;\r\n    var style = state.tokenize(stream, state);\r\n    return style;\r\n  }\r\n};\r\n\r\n"],
  "mappings": "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",
  "names": []
}
