{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/tcl.js"],
  "sourcesContent": ["function parseWords(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n  return obj;\r\n}\r\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\r\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\r\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\r\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\r\n                          \"filename flush for foreach format gets glob global history http if \" +\r\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\r\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\r\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\r\n                          \"registry regsub rename resource return scan seek set socket source split \" +\r\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\r\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\r\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\r\n                          \"vwait\");\r\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\r\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\r\nfunction chain(stream, state, f) {\r\n  state.tokenize = f;\r\n  return f(stream, state);\r\n}\r\nfunction tokenBase(stream, state) {\r\n  var beforeParams = state.beforeParams;\r\n  state.beforeParams = false;\r\n  var ch = stream.next();\r\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\r\n    return chain(stream, state, tokenString(ch));\r\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\r\n    if (ch == \"(\" && beforeParams) state.inParams = true;\r\n    else if (ch == \")\") state.inParams = false;\r\n    return null;\r\n  } else if (/\\d/.test(ch)) {\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    return \"number\";\r\n  } else if (ch == \"#\") {\r\n    if (stream.eat(\"*\"))\r\n      return chain(stream, state, tokenComment);\r\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\r\n      return chain(stream, state, tokenUnparsed);\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  } else if (ch == '\"') {\r\n    stream.skipTo(/\"/);\r\n    return \"comment\";\r\n  } else if (ch == \"$\") {\r\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\r\n    stream.eatWhile(/}/);\r\n    state.beforeParams = true;\r\n    return \"builtin\";\r\n  } else if (isOperatorChar.test(ch)) {\r\n    stream.eatWhile(isOperatorChar);\r\n    return \"comment\";\r\n  } else {\r\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\r\n    var word = stream.current().toLowerCase();\r\n    if (keywords && keywords.propertyIsEnumerable(word))\r\n      return \"keyword\";\r\n    if (functions && functions.propertyIsEnumerable(word)) {\r\n      state.beforeParams = true;\r\n      return \"keyword\";\r\n    }\r\n    return null;\r\n  }\r\n}\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) {\r\n        end = true;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end) state.tokenize = tokenBase;\r\n    return \"string\";\r\n  };\r\n}\r\nfunction tokenComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"#\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\nfunction tokenUnparsed(stream, state) {\r\n  var maybeEnd = 0, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"#\" && maybeEnd == 2) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    if (ch == \"]\")\r\n      maybeEnd++;\r\n    else if (ch != \" \")\r\n      maybeEnd = 0;\r\n  }\r\n  return \"meta\";\r\n}\r\nexport const tcl = {\r\n  name: \"tcl\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      beforeParams: false,\r\n      inParams: false\r\n    };\r\n  },\r\n  token: function(stream, state) {\r\n    if (stream.eatSpace()) return null;\r\n    return state.tokenize(stream, state);\r\n  },\r\n  languageData: {\r\n    commentTokens: {line: \"#\"}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
