{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/ttcn-cfg.js"],
  "sourcesContent": ["function words(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i)\r\n    obj[words[i]] = true;\r\n  return obj;\r\n}\r\n\r\nconst parserConfig = {\r\n  name: \"ttcn-cfg\",\r\n  keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" +\r\n                  \" TimeStampFormat LogEventTypes SourceInfoFormat\" +\r\n                  \" LogEntityName LogSourceInfo DiskFullAction\" +\r\n                  \" LogFileNumber LogFileSize MatchingHints Detailed\" +\r\n                  \" Compact SubCategories Stack Single None Seconds\" +\r\n                  \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" +\r\n                  \" NumHCs UnixSocketsEnabled LocalAddress\"),\r\n  fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" +\r\n                              \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" +\r\n                              \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" +\r\n                              \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" +\r\n                              \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" +\r\n                              \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" +\r\n                              \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" +\r\n                              \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" +\r\n                              \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" +\r\n                              \" DEBUG_ENCDEC DEBUG_TESTPORT\" +\r\n                              \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" +\r\n                              \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" +\r\n                              \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" +\r\n                              \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" +\r\n                              \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" +\r\n                              \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" +\r\n                              \" FUNCTION_RND FUNCTION_UNQUALIFIED\" +\r\n                              \" MATCHING_DONE MATCHING_MCSUCCESS\" +\r\n                              \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" +\r\n                              \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" +\r\n                              \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" +\r\n                              \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" +\r\n                              \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" +\r\n                              \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" +\r\n                              \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" +\r\n                              \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" +\r\n                              \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" +\r\n                              \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" +\r\n                              \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" +\r\n                              \" PORTEVENT_PCOUT PORTEVENT_PMIN\" +\r\n                              \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" +\r\n                              \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" +\r\n                              \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" +\r\n                              \" TESTCASE_FINISH TESTCASE_START\" +\r\n                              \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" +\r\n                              \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" +\r\n                              \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" +\r\n                              \" USER_UNQUALIFIED VERDICTOP_FINAL\" +\r\n                              \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" +\r\n                              \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\r\n  externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" +\r\n                          \" EndTestCase\"),\r\n  multiLineStrings: true\r\n}\r\n\r\nvar keywords = parserConfig.keywords,\r\n    fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,\r\n    externalCommands = parserConfig.externalCommands,\r\n    multiLineStrings = parserConfig.multiLineStrings,\r\n    indentStatements = parserConfig.indentStatements !== false;\r\nvar isOperatorChar = /[\\|]/;\r\nvar curPunc;\r\n\r\nfunction tokenBase(stream, state) {\r\n  var ch = stream.next();\r\n  if (ch == '\"' || ch == \"'\") {\r\n    state.tokenize = tokenString(ch);\r\n    return state.tokenize(stream, state);\r\n  }\r\n  if (/[:=]/.test(ch)) {\r\n    curPunc = ch;\r\n    return \"punctuation\";\r\n  }\r\n  if (ch == \"#\"){\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n  if (/\\d/.test(ch)) {\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    return \"number\";\r\n  }\r\n  if (isOperatorChar.test(ch)) {\r\n    stream.eatWhile(isOperatorChar);\r\n    return \"operator\";\r\n  }\r\n  if (ch == \"[\"){\r\n    stream.eatWhile(/[\\w_\\]]/);\r\n    return \"number\";\r\n  }\r\n\r\n  stream.eatWhile(/[\\w\\$_]/);\r\n  var cur = stream.current();\r\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\r\n  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))\r\n    return \"atom\";\r\n  if (externalCommands.propertyIsEnumerable(cur)) return \"deleted\";\r\n\r\n  return \"variable\";\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped){\r\n        var afterNext = stream.peek();\r\n        //look if the character if the quote is like the B in '10100010'B\r\n        if (afterNext){\r\n          afterNext = afterNext.toLowerCase();\r\n          if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\r\n            stream.next();\r\n        }\r\n        end = true; break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end || !(escaped || multiLineStrings))\r\n      state.tokenize = null;\r\n    return \"string\";\r\n  };\r\n}\r\n\r\nfunction Context(indented, column, type, align, prev) {\r\n  this.indented = indented;\r\n  this.column = column;\r\n  this.type = type;\r\n  this.align = align;\r\n  this.prev = prev;\r\n}\r\nfunction pushContext(state, col, type) {\r\n  var indent = state.indented;\r\n  if (state.context && state.context.type == \"statement\")\r\n    indent = state.context.indented;\r\n  return state.context = new Context(indent, col, type, null, state.context);\r\n}\r\nfunction popContext(state) {\r\n  var t = state.context.type;\r\n  if (t == \")\" || t == \"]\" || t == \"}\")\r\n    state.indented = state.context.indented;\r\n  return state.context = state.context.prev;\r\n}\r\n\r\n//Interface\r\nexport const ttcnCfg = {\r\n  name: \"ttcn\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: null,\r\n      context: new Context(0, 0, \"top\", false),\r\n      indented: 0,\r\n      startOfLine: true\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    var ctx = state.context;\r\n    if (stream.sol()) {\r\n      if (ctx.align == null) ctx.align = false;\r\n      state.indented = stream.indentation();\r\n      state.startOfLine = true;\r\n    }\r\n    if (stream.eatSpace()) return null;\r\n    curPunc = null;\r\n    var style = (state.tokenize || tokenBase)(stream, state);\r\n    if (style == \"comment\") return style;\r\n    if (ctx.align == null) ctx.align = true;\r\n\r\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\r\n        && ctx.type == \"statement\"){\r\n      popContext(state);\r\n    }\r\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\r\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\r\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\r\n    else if (curPunc == \"}\") {\r\n      while (ctx.type == \"statement\") ctx = popContext(state);\r\n      if (ctx.type == \"}\") ctx = popContext(state);\r\n      while (ctx.type == \"statement\") ctx = popContext(state);\r\n    }\r\n    else if (curPunc == ctx.type) popContext(state);\r\n    else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\r\n                                   && curPunc != ';') || (ctx.type == \"statement\"\r\n                                                          && curPunc == \"newstatement\")))\r\n      pushContext(state, stream.column(), \"statement\");\r\n    state.startOfLine = false;\r\n    return style;\r\n  },\r\n\r\n  languageData: {\r\n    indentOnInput: /^\\s*[{}]$/,\r\n    commentTokens: {line: \"#\"}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["words"]
}
