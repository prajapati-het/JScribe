{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/pig.js"],
  "sourcesContent": ["function words(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n  return obj;\r\n}\r\n\r\n// builtin funcs taken from trunk revision 1303237\r\nvar pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\r\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\r\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\r\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\r\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\r\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\r\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\r\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\r\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\r\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\r\n\r\n// taken from QueryLexer.g\r\nvar pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\r\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\r\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\r\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\r\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\r\n\r\n// data types\r\nvar pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\r\n\r\nvar builtins = words(pBuiltins), keywords = words(pKeywords), types = words(pTypes)\r\n\r\nvar isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\r\n\r\nfunction chain(stream, state, f) {\r\n  state.tokenize = f;\r\n  return f(stream, state);\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  var isEnd = false;\r\n  var ch;\r\n  while(ch = stream.next()) {\r\n    if(ch == \"/\" && isEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    isEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) {\r\n        end = true; break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end || !escaped)\r\n      state.tokenize = tokenBase;\r\n    return \"error\";\r\n  };\r\n}\r\n\r\n\r\nfunction tokenBase(stream, state) {\r\n  var ch = stream.next();\r\n\r\n  // is a start of string?\r\n  if (ch == '\"' || ch == \"'\")\r\n    return chain(stream, state, tokenString(ch));\r\n  // is it one of the special chars\r\n  else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\r\n    return null;\r\n  // is it a number?\r\n  else if(/\\d/.test(ch)) {\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    return \"number\";\r\n  }\r\n  // multi line comment or operator\r\n  else if (ch == \"/\") {\r\n    if (stream.eat(\"*\")) {\r\n      return chain(stream, state, tokenComment);\r\n    }\r\n    else {\r\n      stream.eatWhile(isOperatorChar);\r\n      return \"operator\";\r\n    }\r\n  }\r\n  // single line comment or operator\r\n  else if (ch==\"-\") {\r\n    if(stream.eat(\"-\")){\r\n      stream.skipToEnd();\r\n      return \"comment\";\r\n    }\r\n    else {\r\n      stream.eatWhile(isOperatorChar);\r\n      return \"operator\";\r\n    }\r\n  }\r\n  // is it an operator\r\n  else if (isOperatorChar.test(ch)) {\r\n    stream.eatWhile(isOperatorChar);\r\n    return \"operator\";\r\n  }\r\n  else {\r\n    // get the while word\r\n    stream.eatWhile(/[\\w\\$_]/);\r\n    // is it one of the listed keywords?\r\n    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\r\n      //keywords can be used as variables like flatten(group), group.$0 etc..\r\n      if (!stream.eat(\")\") && !stream.eat(\".\"))\r\n        return \"keyword\";\r\n    }\r\n    // is it one of the builtin functions?\r\n    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\r\n      return \"builtin\";\r\n    // is it one of the listed types?\r\n    if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\r\n      return \"type\";\r\n    // default is a 'variable'\r\n    return \"variable\";\r\n  }\r\n}\r\n\r\n// Interface\r\nexport const pig = {\r\n  name: \"pig\",\r\n\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      startOfLine: true\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    if(stream.eatSpace()) return null;\r\n    var style = state.tokenize(stream, state);\r\n    return style;\r\n  },\r\n\r\n  languageData: {\r\n    autocomplete: (pBuiltins + pTypes + pKeywords).split(\" \")\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["words"]
}
