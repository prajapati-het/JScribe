{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/webidl.js"],
  "sourcesContent": ["function wordRegexp(words) {\r\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\r\n};\r\n\r\nvar builtinArray = [\r\n  \"Clamp\",\r\n  \"Constructor\",\r\n  \"EnforceRange\",\r\n  \"Exposed\",\r\n  \"ImplicitThis\",\r\n  \"Global\", \"PrimaryGlobal\",\r\n  \"LegacyArrayClass\",\r\n  \"LegacyUnenumerableNamedProperties\",\r\n  \"LenientThis\",\r\n  \"NamedConstructor\",\r\n  \"NewObject\",\r\n  \"NoInterfaceObject\",\r\n  \"OverrideBuiltins\",\r\n  \"PutForwards\",\r\n  \"Replaceable\",\r\n  \"SameObject\",\r\n  \"TreatNonObjectAsNull\",\r\n  \"TreatNullAs\",\r\n    \"EmptyString\",\r\n  \"Unforgeable\",\r\n  \"Unscopeable\"\r\n];\r\nvar builtins = wordRegexp(builtinArray);\r\n\r\nvar typeArray = [\r\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\r\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\r\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\r\n  \"Promise\",                                    // PromiseType\r\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\r\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\r\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\r\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\r\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\r\n  \"any\",                                        // Rest of SingleType\r\n  \"void\"                                        // Rest of ReturnType\r\n];\r\nvar types = wordRegexp(typeArray);\r\n\r\nvar keywordArray = [\r\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\r\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\r\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\r\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\r\n                                                // \"unrestricted\"\r\n  \"optional\", \"readonly\", \"or\"\r\n];\r\nvar keywords = wordRegexp(keywordArray);\r\n\r\nvar atomArray = [\r\n  \"true\", \"false\",                              // BooleanLiteral\r\n  \"Infinity\", \"NaN\",                            // FloatLiteral\r\n  \"null\"                                        // Rest of ConstValue\r\n];\r\nvar atoms = wordRegexp(atomArray);\r\n\r\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\r\nvar startDefs = wordRegexp(startDefArray);\r\n\r\nvar endDefArray = [\"typedef\"];\r\nvar endDefs = wordRegexp(endDefArray);\r\n\r\nvar singleOperators = /^[:<=>?]/;\r\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\r\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\r\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\r\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\r\nvar strings = /^\"[^\"]*\"/;\r\nvar multilineComments = /^\\/\\*.*?\\*\\//;\r\nvar multilineCommentsStart = /^\\/\\*.*/;\r\nvar multilineCommentsEnd = /^.*?\\*\\//;\r\n\r\nfunction readToken(stream, state) {\r\n  // whitespace\r\n  if (stream.eatSpace()) return null;\r\n\r\n  // comment\r\n  if (state.inComment) {\r\n    if (stream.match(multilineCommentsEnd)) {\r\n      state.inComment = false;\r\n      return \"comment\";\r\n    }\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n  if (stream.match(\"//\")) {\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n  if (stream.match(multilineComments)) return \"comment\";\r\n  if (stream.match(multilineCommentsStart)) {\r\n    state.inComment = true;\r\n    return \"comment\";\r\n  }\r\n\r\n  // integer and float\r\n  if (stream.match(/^-?[0-9\\.]/, false)) {\r\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\r\n  }\r\n\r\n  // string\r\n  if (stream.match(strings)) return \"string\";\r\n\r\n  // identifier\r\n  if (state.startDef && stream.match(identifiers)) return \"def\";\r\n\r\n  if (state.endDef && stream.match(identifiersEnd)) {\r\n    state.endDef = false;\r\n    return \"def\";\r\n  }\r\n\r\n  if (stream.match(keywords)) return \"keyword\";\r\n\r\n  if (stream.match(types)) {\r\n    var lastToken = state.lastToken;\r\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\r\n\r\n    if (lastToken === \":\" || lastToken === \"implements\" ||\r\n        nextToken === \"implements\" || nextToken === \"=\") {\r\n      // Used as identifier\r\n      return \"builtin\";\r\n    } else {\r\n      // Used as type\r\n      return \"type\";\r\n    }\r\n  }\r\n\r\n  if (stream.match(builtins)) return \"builtin\";\r\n  if (stream.match(atoms)) return \"atom\";\r\n  if (stream.match(identifiers)) return \"variable\";\r\n\r\n  // other\r\n  if (stream.match(singleOperators)) return \"operator\";\r\n\r\n  // unrecognized\r\n  stream.next();\r\n  return null;\r\n};\r\n\r\nexport const webIDL = {\r\n  name: \"webidl\",\r\n  startState: function() {\r\n    return {\r\n      // Is in multiline comment\r\n      inComment: false,\r\n      // Last non-whitespace, matched token\r\n      lastToken: \"\",\r\n      // Next token is a definition\r\n      startDef: false,\r\n      // Last token of the statement is a definition\r\n      endDef: false\r\n    };\r\n  },\r\n  token: function(stream, state) {\r\n    var style = readToken(stream, state);\r\n\r\n    if (style) {\r\n      var cur = stream.current();\r\n      state.lastToken = cur;\r\n      if (style === \"keyword\") {\r\n        state.startDef = startDefs.test(cur);\r\n        state.endDef = state.endDef || endDefs.test(cur);\r\n      } else {\r\n        state.startDef = false;\r\n      }\r\n    }\r\n\r\n    return style;\r\n  },\r\n\r\n  languageData: {\r\n    autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
