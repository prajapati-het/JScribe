{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/yacas.js"],
  "sourcesContent": ["function words(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n  return obj;\r\n}\r\n\r\nvar bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\r\n                      \"FromString Function Integrate InverseTaylor Limit \" +\r\n                      \"LocalSymbols Macro MacroRule MacroRulePattern \" +\r\n                      \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\r\n                      \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\r\n                      \"ToStdout ToString TraceRule Until While\");\r\n\r\n// patterns\r\nvar pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\r\nvar pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\r\n\r\n// regular expressions\r\nvar reFloatForm    = new RegExp(pFloatForm);\r\nvar reIdentifier   = new RegExp(pIdentifier);\r\nvar rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\r\nvar reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\r\n\r\nfunction tokenBase(stream, state) {\r\n  var ch;\r\n\r\n  // get next character\r\n  ch = stream.next();\r\n\r\n  // string\r\n  if (ch === '\"') {\r\n    state.tokenize = tokenString;\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  // comment\r\n  if (ch === '/') {\r\n    if (stream.eat('*')) {\r\n      state.tokenize = tokenComment;\r\n      return state.tokenize(stream, state);\r\n    }\r\n    if (stream.eat(\"/\")) {\r\n      stream.skipToEnd();\r\n      return \"comment\";\r\n    }\r\n  }\r\n\r\n  // go back one character\r\n  stream.backUp(1);\r\n\r\n  // update scope info\r\n  var m = stream.match(/^(\\w+)\\s*\\(/, false);\r\n  if (m !== null && bodiedOps.hasOwnProperty(m[1]))\r\n    state.scopes.push('bodied');\r\n\r\n  var scope = currentScope(state);\r\n\r\n  if (scope === 'bodied' && ch === '[')\r\n    state.scopes.pop();\r\n\r\n  if (ch === '[' || ch === '{' || ch === '(')\r\n    state.scopes.push(ch);\r\n\r\n  scope = currentScope(state);\r\n\r\n  if (scope === '[' && ch === ']' ||\r\n      scope === '{' && ch === '}' ||\r\n      scope === '(' && ch === ')')\r\n    state.scopes.pop();\r\n\r\n  if (ch === ';') {\r\n    while (scope === 'bodied') {\r\n      state.scopes.pop();\r\n      scope = currentScope(state);\r\n    }\r\n  }\r\n\r\n  // look for ordered rules\r\n  if (stream.match(/\\d+ *#/, true, false)) {\r\n    return 'qualifier';\r\n  }\r\n\r\n  // look for numbers\r\n  if (stream.match(reFloatForm, true, false)) {\r\n    return 'number';\r\n  }\r\n\r\n  // look for placeholders\r\n  if (stream.match(rePattern, true, false)) {\r\n    return 'variableName.special';\r\n  }\r\n\r\n  // match all braces separately\r\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\r\n    return 'bracket';\r\n  }\r\n\r\n  // literals looking like function calls\r\n  if (stream.match(reFunctionLike, true, false)) {\r\n    stream.backUp(1);\r\n    return 'variableName.function';\r\n  }\r\n\r\n  // all other identifiers\r\n  if (stream.match(reIdentifier, true, false)) {\r\n    return 'variable';\r\n  }\r\n\r\n  // operators; note that operators like @@ or /; are matched separately for each symbol.\r\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\r\n    return 'operator';\r\n  }\r\n\r\n  // everything else is an error\r\n  return 'error';\r\n}\r\n\r\nfunction tokenString(stream, state) {\r\n  var next, end = false, escaped = false;\r\n  while ((next = stream.next()) != null) {\r\n    if (next === '\"' && !escaped) {\r\n      end = true;\r\n      break;\r\n    }\r\n    escaped = !escaped && next === '\\\\';\r\n  }\r\n  if (end && !escaped) {\r\n    state.tokenize = tokenBase;\r\n  }\r\n  return 'string';\r\n};\r\n\r\nfunction tokenComment(stream, state) {\r\n  var prev, next;\r\n  while((next = stream.next()) != null) {\r\n    if (prev === '*' && next === '/') {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    prev = next;\r\n  }\r\n  return 'comment';\r\n}\r\n\r\nfunction currentScope(state) {\r\n  var scope = null;\r\n  if (state.scopes.length > 0)\r\n    scope = state.scopes[state.scopes.length - 1];\r\n  return scope;\r\n}\r\n\r\nexport const yacas = {\r\n  name: \"yacas\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      scopes: []\r\n    };\r\n  },\r\n  token: function(stream, state) {\r\n    if (stream.eatSpace()) return null;\r\n    return state.tokenize(stream, state);\r\n  },\r\n  indent: function(state, textAfter, cx) {\r\n    if (state.tokenize !== tokenBase && state.tokenize !== null)\r\n      return null;\r\n\r\n    var delta = 0;\r\n    if (textAfter === ']' || textAfter === '];' ||\r\n        textAfter === '}' || textAfter === '};' ||\r\n        textAfter === ');')\r\n      delta = -1;\r\n\r\n    return (state.scopes.length + delta) * cx.unit;\r\n  },\r\n\r\n  languageData: {\r\n    electricInput: /[{}\\[\\]()\\;]/,\r\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["words"]
}
