{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/jinja2.js"],
  "sourcesContent": ["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\r\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\",\r\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\r\n                \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\",\r\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\r\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\",\r\n                \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\r\n                \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\",\r\n                \"openbrace\", \"closebrace\", \"opencomment\",\r\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\r\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\r\n                \"endblocktrans\", \"get_available_languages\",\r\n                \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\r\n    operator = /^[+\\-*&%=<>!?|~^]/,\r\n    sign = /^[:\\[\\(\\{]/,\r\n    atom = [\"true\", \"false\"],\r\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\r\n\r\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\r\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\r\n\r\nfunction tokenBase (stream, state) {\r\n  var ch = stream.peek();\r\n\r\n  //Comment\r\n  if (state.incomment) {\r\n    if(!stream.skipTo(\"#}\")) {\r\n      stream.skipToEnd();\r\n    } else {\r\n      stream.eatWhile(/\\#|}/);\r\n      state.incomment = false;\r\n    }\r\n    return \"comment\";\r\n    //Tag\r\n  } else if (state.intag) {\r\n    //After operator\r\n    if(state.operator) {\r\n      state.operator = false;\r\n      if(stream.match(atom)) {\r\n        return \"atom\";\r\n      }\r\n      if(stream.match(number)) {\r\n        return \"number\";\r\n      }\r\n    }\r\n    //After sign\r\n    if(state.sign) {\r\n      state.sign = false;\r\n      if(stream.match(atom)) {\r\n        return \"atom\";\r\n      }\r\n      if(stream.match(number)) {\r\n        return \"number\";\r\n      }\r\n    }\r\n\r\n    if(state.instring) {\r\n      if(ch == state.instring) {\r\n        state.instring = false;\r\n      }\r\n      stream.next();\r\n      return \"string\";\r\n    } else if(ch == \"'\" || ch == '\"') {\r\n      state.instring = ch;\r\n      stream.next();\r\n      return \"string\";\r\n    } else if (state.inbraces > 0 && ch ==\")\") {\r\n      stream.next()\r\n      state.inbraces--;\r\n    }\r\n    else if (ch == \"(\") {\r\n      stream.next()\r\n      state.inbraces++;\r\n    }\r\n    else if (state.inbrackets > 0 && ch ==\"]\") {\r\n      stream.next()\r\n      state.inbrackets--;\r\n    }\r\n    else if (ch == \"[\") {\r\n      stream.next()\r\n      state.inbrackets++;\r\n    } else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\r\n      state.intag = false;\r\n      return \"tag\";\r\n    } else if(stream.match(operator)) {\r\n      state.operator = true;\r\n      return \"operator\";\r\n    } else if(stream.match(sign)) {\r\n      state.sign = true;\r\n    } else {\r\n      if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\r\n        //allow nospace after tag before the keyword\r\n        return \"keyword\";\r\n      }\r\n      if(stream.eat(\" \") || stream.sol()) {\r\n        if(stream.match(keywords)) {\r\n          return \"keyword\";\r\n        }\r\n        if(stream.match(atom)) {\r\n          return \"atom\";\r\n        }\r\n        if(stream.match(number)) {\r\n          return \"number\";\r\n        }\r\n        if(stream.sol()) {\r\n          stream.next();\r\n        }\r\n      } else {\r\n        stream.next();\r\n      }\r\n\r\n    }\r\n    return \"variable\";\r\n  } else if (stream.eat(\"{\")) {\r\n    if (stream.eat(\"#\")) {\r\n      state.incomment = true;\r\n      if(!stream.skipTo(\"#}\")) {\r\n        stream.skipToEnd();\r\n      } else {\r\n        stream.eatWhile(/\\#|}/);\r\n        state.incomment = false;\r\n      }\r\n      return \"comment\";\r\n      //Open tag\r\n    } else if (ch = stream.eat(/\\{|%/)) {\r\n      //Cache close tag\r\n      state.intag = ch;\r\n      state.inbraces = 0;\r\n      state.inbrackets = 0;\r\n      if(ch == \"{\") {\r\n        state.intag = \"}\";\r\n      }\r\n      stream.eat(\"-\");\r\n      return \"tag\";\r\n    }\r\n    //Line statements\r\n  } else if (stream.eat('#')) {\r\n    if (stream.peek() == '#') {\r\n      stream.skipToEnd();\r\n      return \"comment\"\r\n    }\r\n    else if (!stream.eol()) {\r\n      state.intag = true;\r\n      state.lineTag = true;\r\n      state.inbraces = 0;\r\n      state.inbrackets = 0;\r\n      return \"tag\";\r\n    }\r\n  }\r\n  stream.next();\r\n};\r\n\r\nexport const jinja2 = {\r\n  name: \"jinja2\",\r\n  startState: function () {\r\n    return {tokenize: tokenBase, inbrackets: 0, inbraces: 0};\r\n  },\r\n  token: function(stream, state) {\r\n    var style = state.tokenize(stream, state);\r\n    if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\r\n      //Close line statement at the EOL\r\n      state.intag = false\r\n      state.lineTag = false\r\n    }\r\n    return style;\r\n  },\r\n  languageData: {\r\n    commentTokens: {block: {open: \"{#\", close: \"#}\", line: \"##\"}}\r\n  }\r\n};\r\n"],
  "mappings": ";AAAA,IAAI,WAAW;AAAA,EAAC;AAAA,EAAO;AAAA,EAAM;AAAA,EAAS;AAAA,EAAY;AAAA,EAAM;AAAA,EAAS;AAAA,EAAS;AAAA,EAAQ;AAAA,EAClE;AAAA,EAAW;AAAA,EAAU;AAAA,EAAa;AAAA,EAAW;AAAA,EAAM;AAAA,EACnD;AAAA,EAAU;AAAA,EAAM;AAAA,EAAS;AAAA,EAAa;AAAA,EACtC;AAAA,EAAW;AAAA,EAAc;AAAA,EAAc;AAAA,EAAO;AAAA,EAAO;AAAA,EACrD;AAAA,EAAiB;AAAA,EAAM;AAAA,EAAW;AAAA,EAAQ;AAAA,EAAO;AAAA,EAAO;AAAA,EACxD;AAAA,EAAU;AAAA,EAAW;AAAA,EAAY;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAW;AAAA,EACjE;AAAA,EAAY;AAAA,EAAgB;AAAA,EAAO;AAAA,EAAe;AAAA,EAClD;AAAA,EAAc;AAAA,EAAgB;AAAA,EAAiB;AAAA,EAAW;AAAA,EAC1D;AAAA,EAAa;AAAA,EAAc;AAAA,EAC3B;AAAA,EAAgB;AAAA,EAAc;AAAA,EAAO;AAAA,EAAQ;AAAA,EAC7C;AAAA,EAAwB;AAAA,EAAS;AAAA,EAAY;AAAA,EAAQ;AAAA,EACrD;AAAA,EAAiB;AAAA,EACjB;AAAA,EAA6B;AAAA,EAAa;AAAA,EAAc;AAAe;AAZvF,IAaI,WAAW;AAbf,IAcI,OAAO;AAdX,IAeI,OAAO,CAAC,QAAQ,OAAO;AAf3B,IAgBI,SAAS;AAEb,WAAW,IAAI,OAAO,OAAO,SAAS,KAAK,KAAK,IAAI,OAAO;AAC3D,OAAO,IAAI,OAAO,OAAO,KAAK,KAAK,KAAK,IAAI,OAAO;AAEnD,SAAS,UAAW,QAAQ,OAAO;AACjC,MAAI,KAAK,OAAO,KAAK;AAGrB,MAAI,MAAM,WAAW;AACnB,QAAG,CAAC,OAAO,OAAO,IAAI,GAAG;AACvB,aAAO,UAAU;AAAA,IACnB,OAAO;AACL,aAAO,SAAS,MAAM;AACtB,YAAM,YAAY;AAAA,IACpB;AACA,WAAO;AAAA,EAET,WAAW,MAAM,OAAO;AAEtB,QAAG,MAAM,UAAU;AACjB,YAAM,WAAW;AACjB,UAAG,OAAO,MAAM,IAAI,GAAG;AACrB,eAAO;AAAA,MACT;AACA,UAAG,OAAO,MAAM,MAAM,GAAG;AACvB,eAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAG,MAAM,MAAM;AACb,YAAM,OAAO;AACb,UAAG,OAAO,MAAM,IAAI,GAAG;AACrB,eAAO;AAAA,MACT;AACA,UAAG,OAAO,MAAM,MAAM,GAAG;AACvB,eAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAG,MAAM,UAAU;AACjB,UAAG,MAAM,MAAM,UAAU;AACvB,cAAM,WAAW;AAAA,MACnB;AACA,aAAO,KAAK;AACZ,aAAO;AAAA,IACT,WAAU,MAAM,OAAO,MAAM,KAAK;AAChC,YAAM,WAAW;AACjB,aAAO,KAAK;AACZ,aAAO;AAAA,IACT,WAAW,MAAM,WAAW,KAAK,MAAK,KAAK;AACzC,aAAO,KAAK;AACZ,YAAM;AAAA,IACR,WACS,MAAM,KAAK;AAClB,aAAO,KAAK;AACZ,YAAM;AAAA,IACR,WACS,MAAM,aAAa,KAAK,MAAK,KAAK;AACzC,aAAO,KAAK;AACZ,YAAM;AAAA,IACR,WACS,MAAM,KAAK;AAClB,aAAO,KAAK;AACZ,YAAM;AAAA,IACR,WAAW,CAAC,MAAM,YAAY,OAAO,MAAM,MAAM,QAAQ,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,OAAO,MAAM,MAAM,QAAQ,GAAG,IAAI;AACpH,YAAM,QAAQ;AACd,aAAO;AAAA,IACT,WAAU,OAAO,MAAM,QAAQ,GAAG;AAChC,YAAM,WAAW;AACjB,aAAO;AAAA,IACT,WAAU,OAAO,MAAM,IAAI,GAAG;AAC5B,YAAM,OAAO;AAAA,IACf,OAAO;AACL,UAAI,OAAO,OAAO,KAAK,KAAK,MAAM,WAAW,OAAO,MAAM,QAAQ,GAAG;AAEnE,eAAO;AAAA,MACT;AACA,UAAG,OAAO,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG;AAClC,YAAG,OAAO,MAAM,QAAQ,GAAG;AACzB,iBAAO;AAAA,QACT;AACA,YAAG,OAAO,MAAM,IAAI,GAAG;AACrB,iBAAO;AAAA,QACT;AACA,YAAG,OAAO,MAAM,MAAM,GAAG;AACvB,iBAAO;AAAA,QACT;AACA,YAAG,OAAO,IAAI,GAAG;AACf,iBAAO,KAAK;AAAA,QACd;AAAA,MACF,OAAO;AACL,eAAO,KAAK;AAAA,MACd;AAAA,IAEF;AACA,WAAO;AAAA,EACT,WAAW,OAAO,IAAI,GAAG,GAAG;AAC1B,QAAI,OAAO,IAAI,GAAG,GAAG;AACnB,YAAM,YAAY;AAClB,UAAG,CAAC,OAAO,OAAO,IAAI,GAAG;AACvB,eAAO,UAAU;AAAA,MACnB,OAAO;AACL,eAAO,SAAS,MAAM;AACtB,cAAM,YAAY;AAAA,MACpB;AACA,aAAO;AAAA,IAET,WAAW,KAAK,OAAO,IAAI,MAAM,GAAG;AAElC,YAAM,QAAQ;AACd,YAAM,WAAW;AACjB,YAAM,aAAa;AACnB,UAAG,MAAM,KAAK;AACZ,cAAM,QAAQ;AAAA,MAChB;AACA,aAAO,IAAI,GAAG;AACd,aAAO;AAAA,IACT;AAAA,EAEF,WAAW,OAAO,IAAI,GAAG,GAAG;AAC1B,QAAI,OAAO,KAAK,KAAK,KAAK;AACxB,aAAO,UAAU;AACjB,aAAO;AAAA,IACT,WACS,CAAC,OAAO,IAAI,GAAG;AACtB,YAAM,QAAQ;AACd,YAAM,UAAU;AAChB,YAAM,WAAW;AACjB,YAAM,aAAa;AACnB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,KAAK;AACd;AAEO,IAAM,SAAS;AAAA,EACpB,MAAM;AAAA,EACN,YAAY,WAAY;AACtB,WAAO,EAAC,UAAU,WAAW,YAAY,GAAG,UAAU,EAAC;AAAA,EACzD;AAAA,EACA,OAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,QAAQ,MAAM,SAAS,QAAQ,KAAK;AACxC,QAAI,OAAO,IAAI,KAAK,MAAM,WAAW,CAAC,MAAM,YAAY,MAAM,YAAY,KAAK,MAAM,cAAc,GAAG;AAEpG,YAAM,QAAQ;AACd,YAAM,UAAU;AAAA,IAClB;AACA,WAAO;AAAA,EACT;AAAA,EACA,cAAc;AAAA,IACZ,eAAe,EAAC,OAAO,EAAC,MAAM,MAAM,OAAO,MAAM,MAAM,KAAI,EAAC;AAAA,EAC9D;AACF;",
  "names": []
}
