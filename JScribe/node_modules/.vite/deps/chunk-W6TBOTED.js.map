{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/solr.js"],
  "sourcesContent": ["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\r\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\r\nvar isOperatorString = /^(OR|AND|NOT|TO)$/;\r\n\r\nfunction isNumber(word) {\r\n  return parseFloat(word).toString() === word;\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) break;\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n\r\n    if (!escaped) state.tokenize = tokenBase;\r\n    return \"string\";\r\n  };\r\n}\r\n\r\nfunction tokenOperator(operator) {\r\n  return function(stream, state) {\r\n    if (operator == \"|\")\r\n      stream.eat(/\\|/);\r\n    else if (operator == \"&\")\r\n      stream.eat(/\\&/);\r\n\r\n    state.tokenize = tokenBase;\r\n    return \"operator\";\r\n  };\r\n}\r\n\r\nfunction tokenWord(ch) {\r\n  return function(stream, state) {\r\n    var word = ch;\r\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\r\n      word += stream.next();\r\n    }\r\n\r\n    state.tokenize = tokenBase;\r\n    if (isOperatorString.test(word))\r\n      return \"operator\";\r\n    else if (isNumber(word))\r\n      return \"number\";\r\n    else if (stream.peek() == \":\")\r\n      return \"propertyName\";\r\n    else\r\n      return \"string\";\r\n  };\r\n}\r\n\r\nfunction tokenBase(stream, state) {\r\n  var ch = stream.next();\r\n  if (ch == '\"')\r\n    state.tokenize = tokenString(ch);\r\n  else if (isOperatorChar.test(ch))\r\n    state.tokenize = tokenOperator(ch);\r\n  else if (isStringChar.test(ch))\r\n    state.tokenize = tokenWord(ch);\r\n\r\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\r\n}\r\n\r\nexport const solr = {\r\n  name: \"solr\",\r\n\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    if (stream.eatSpace()) return null;\r\n    return state.tokenize(stream, state);\r\n  }\r\n};\r\n"],
  "mappings": ";AAAA,IAAI,eAAe;AACnB,IAAI,iBAAiB;AACrB,IAAI,mBAAmB;AAEvB,SAAS,SAAS,MAAM;AACtB,SAAO,WAAW,IAAI,EAAE,SAAS,MAAM;AACzC;AAEA,SAAS,YAAY,OAAO;AAC1B,SAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,UAAU,OAAO;AACrB,YAAQ,OAAO,OAAO,KAAK,MAAM,MAAM;AACrC,UAAI,QAAQ,SAAS,CAAC,QAAS;AAC/B,gBAAU,CAAC,WAAW,QAAQ;AAAA,IAChC;AAEA,QAAI,CAAC,QAAS,OAAM,WAAW;AAC/B,WAAO;AAAA,EACT;AACF;AAEA,SAAS,cAAc,UAAU;AAC/B,SAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,YAAY;AACd,aAAO,IAAI,IAAI;AAAA,aACR,YAAY;AACnB,aAAO,IAAI,IAAI;AAEjB,UAAM,WAAW;AACjB,WAAO;AAAA,EACT;AACF;AAEA,SAAS,UAAU,IAAI;AACrB,SAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,OAAO;AACX,YAAQ,KAAK,OAAO,KAAK,MAAM,GAAG,MAAM,YAAY,KAAK,MAAM;AAC7D,cAAQ,OAAO,KAAK;AAAA,IACtB;AAEA,UAAM,WAAW;AACjB,QAAI,iBAAiB,KAAK,IAAI;AAC5B,aAAO;AAAA,aACA,SAAS,IAAI;AACpB,aAAO;AAAA,aACA,OAAO,KAAK,KAAK;AACxB,aAAO;AAAA;AAEP,aAAO;AAAA,EACX;AACF;AAEA,SAAS,UAAU,QAAQ,OAAO;AAChC,MAAI,KAAK,OAAO,KAAK;AACrB,MAAI,MAAM;AACR,UAAM,WAAW,YAAY,EAAE;AAAA,WACxB,eAAe,KAAK,EAAE;AAC7B,UAAM,WAAW,cAAc,EAAE;AAAA,WAC1B,aAAa,KAAK,EAAE;AAC3B,UAAM,WAAW,UAAU,EAAE;AAE/B,SAAQ,MAAM,YAAY,YAAa,MAAM,SAAS,QAAQ,KAAK,IAAI;AACzE;AAEO,IAAM,OAAO;AAAA,EAClB,MAAM;AAAA,EAEN,YAAY,WAAW;AACrB,WAAO;AAAA,MACL,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,OAAO,SAAS,QAAQ,OAAO;AAC7B,QAAI,OAAO,SAAS,EAAG,QAAO;AAC9B,WAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,EACrC;AACF;",
  "names": []
}
