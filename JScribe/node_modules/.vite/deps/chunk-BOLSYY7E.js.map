{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/ebnf.js"],
  "sourcesContent": ["var commentType = {slash: 0, parenthesis: 1};\r\nvar stateType = {comment: 0, _string: 1, characterClass: 2};\r\n\r\nexport const ebnf = {\r\n  name: \"ebnf\",\r\n  startState: function () {\r\n    return {\r\n      stringType: null,\r\n      commentType: null,\r\n      braced: 0,\r\n      lhs: true,\r\n      localState: null,\r\n      stack: [],\r\n      inDefinition: false\r\n    };\r\n  },\r\n  token: function (stream, state) {\r\n    if (!stream) return;\r\n\r\n    //check for state changes\r\n    if (state.stack.length === 0) {\r\n      //strings\r\n      if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\r\n        state.stringType = stream.peek();\r\n        stream.next(); // Skip quote\r\n        state.stack.unshift(stateType._string);\r\n      } else if (stream.match('/*')) { //comments starting with /*\r\n        state.stack.unshift(stateType.comment);\r\n        state.commentType = commentType.slash;\r\n      } else if (stream.match('(*')) { //comments starting with (*\r\n        state.stack.unshift(stateType.comment);\r\n        state.commentType = commentType.parenthesis;\r\n      }\r\n    }\r\n\r\n    //return state\r\n    //stack has\r\n    switch (state.stack[0]) {\r\n    case stateType._string:\r\n      while (state.stack[0] === stateType._string && !stream.eol()) {\r\n        if (stream.peek() === state.stringType) {\r\n          stream.next(); // Skip quote\r\n          state.stack.shift(); // Clear flag\r\n        } else if (stream.peek() === \"\\\\\") {\r\n          stream.next();\r\n          stream.next();\r\n        } else {\r\n          stream.match(/^.[^\\\\\\\"\\']*/);\r\n        }\r\n      }\r\n      return state.lhs ? \"property\" : \"string\"; // Token style\r\n\r\n    case stateType.comment:\r\n      while (state.stack[0] === stateType.comment && !stream.eol()) {\r\n        if (state.commentType === commentType.slash && stream.match('*/')) {\r\n          state.stack.shift(); // Clear flag\r\n          state.commentType = null;\r\n        } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\r\n          state.stack.shift(); // Clear flag\r\n          state.commentType = null;\r\n        } else {\r\n          stream.match(/^.[^\\*]*/);\r\n        }\r\n      }\r\n      return \"comment\";\r\n\r\n    case stateType.characterClass:\r\n      while (state.stack[0] === stateType.characterClass && !stream.eol()) {\r\n        if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\r\n          state.stack.shift();\r\n        }\r\n      }\r\n      return \"operator\";\r\n    }\r\n\r\n    var peek = stream.peek();\r\n\r\n    //no stack\r\n    switch (peek) {\r\n    case \"[\":\r\n      stream.next();\r\n      state.stack.unshift(stateType.characterClass);\r\n      return \"bracket\";\r\n    case \":\":\r\n    case \"|\":\r\n    case \";\":\r\n      stream.next();\r\n      return \"operator\";\r\n    case \"%\":\r\n      if (stream.match(\"%%\")) {\r\n        return \"header\";\r\n      } else if (stream.match(/[%][A-Za-z]+/)) {\r\n        return \"keyword\";\r\n      } else if (stream.match(/[%][}]/)) {\r\n        return \"bracket\";\r\n      }\r\n      break;\r\n    case \"/\":\r\n      if (stream.match(/[\\/][A-Za-z]+/)) {\r\n        return \"keyword\";\r\n      }\r\n    case \"\\\\\":\r\n      if (stream.match(/[\\][a-z]+/)) {\r\n        return \"string.special\";\r\n      }\r\n    case \".\":\r\n      if (stream.match(\".\")) {\r\n        return \"atom\";\r\n      }\r\n    case \"*\":\r\n    case \"-\":\r\n    case \"+\":\r\n    case \"^\":\r\n      if (stream.match(peek)) {\r\n        return \"atom\";\r\n      }\r\n    case \"$\":\r\n      if (stream.match(\"$$\")) {\r\n        return \"builtin\";\r\n      } else if (stream.match(/[$][0-9]+/)) {\r\n        return \"variableName.special\";\r\n      }\r\n    case \"<\":\r\n      if (stream.match(/<<[a-zA-Z_]+>>/)) {\r\n        return \"builtin\";\r\n      }\r\n    }\r\n\r\n    if (stream.match('//')) {\r\n      stream.skipToEnd();\r\n      return \"comment\";\r\n    } else if (stream.match('return')) {\r\n      return \"operator\";\r\n    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\r\n      if (stream.match(/(?=[\\(.])/)) {\r\n        return \"variable\";\r\n      } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\r\n        return \"def\";\r\n      }\r\n      return \"variableName.special\";\r\n    } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\r\n      stream.next();\r\n      return \"bracket\";\r\n    } else if (!stream.eatSpace()) {\r\n      stream.next();\r\n    }\r\n    return null;\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
