{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/groovy.js"],
  "sourcesContent": ["function words(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n  return obj;\r\n}\r\nvar keywords = words(\r\n  \"abstract as assert boolean break byte case catch char class const continue def default \" +\r\n    \"do double else enum extends final finally float for goto if implements import in \" +\r\n    \"instanceof int interface long native new package private protected public return \" +\r\n    \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" +\r\n    \"try void volatile while\");\r\nvar blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\r\nvar standaloneKeywords = words(\"return break continue\");\r\nvar atoms = words(\"null true false this\");\r\n\r\nvar curPunc;\r\nfunction tokenBase(stream, state) {\r\n  var ch = stream.next();\r\n  if (ch == '\"' || ch == \"'\") {\r\n    return startString(ch, stream, state);\r\n  }\r\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\r\n    curPunc = ch;\r\n    return null;\r\n  }\r\n  if (/\\d/.test(ch)) {\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\r\n    return \"number\";\r\n  }\r\n  if (ch == \"/\") {\r\n    if (stream.eat(\"*\")) {\r\n      state.tokenize.push(tokenComment);\r\n      return tokenComment(stream, state);\r\n    }\r\n    if (stream.eat(\"/\")) {\r\n      stream.skipToEnd();\r\n      return \"comment\";\r\n    }\r\n    if (expectExpression(state.lastToken, false)) {\r\n      return startString(ch, stream, state);\r\n    }\r\n  }\r\n  if (ch == \"-\" && stream.eat(\">\")) {\r\n    curPunc = \"->\";\r\n    return null;\r\n  }\r\n  if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\r\n    stream.eatWhile(/[+\\-*&%=<>|~]/);\r\n    return \"operator\";\r\n  }\r\n  stream.eatWhile(/[\\w\\$_]/);\r\n  if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\r\n  if (state.lastToken == \".\") return \"property\";\r\n  if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\r\n  var cur = stream.current();\r\n  if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\r\n  if (keywords.propertyIsEnumerable(cur)) {\r\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\r\n    else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\r\n    return \"keyword\";\r\n  }\r\n  return \"variable\";\r\n}\r\ntokenBase.isBase = true;\r\n\r\nfunction startString(quote, stream, state) {\r\n  var tripleQuoted = false;\r\n  if (quote != \"/\" && stream.eat(quote)) {\r\n    if (stream.eat(quote)) tripleQuoted = true;\r\n    else return \"string\";\r\n  }\r\n  function t(stream, state) {\r\n    var escaped = false, next, end = !tripleQuoted;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped) {\r\n        if (!tripleQuoted) { break; }\r\n        if (stream.match(quote + quote)) { end = true; break; }\r\n      }\r\n      if (quote == '\"' && next == \"$\" && !escaped) {\r\n        if (stream.eat(\"{\")) {\r\n          state.tokenize.push(tokenBaseUntilBrace());\r\n          return \"string\";\r\n        } else if (stream.match(/^\\w/, false)) {\r\n          state.tokenize.push(tokenVariableDeref);\r\n          return \"string\";\r\n        }\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end) state.tokenize.pop();\r\n    return \"string\";\r\n  }\r\n  state.tokenize.push(t);\r\n  return t(stream, state);\r\n}\r\n\r\nfunction tokenBaseUntilBrace() {\r\n  var depth = 1;\r\n  function t(stream, state) {\r\n    if (stream.peek() == \"}\") {\r\n      depth--;\r\n      if (depth == 0) {\r\n        state.tokenize.pop();\r\n        return state.tokenize[state.tokenize.length-1](stream, state);\r\n      }\r\n    } else if (stream.peek() == \"{\") {\r\n      depth++;\r\n    }\r\n    return tokenBase(stream, state);\r\n  }\r\n  t.isBase = true;\r\n  return t;\r\n}\r\n\r\nfunction tokenVariableDeref(stream, state) {\r\n  var next = stream.match(/^(\\.|[\\w\\$_]+)/)\r\n  if (!next) {\r\n    state.tokenize.pop()\r\n    return state.tokenize[state.tokenize.length-1](stream, state)\r\n  }\r\n  return next[0] == \".\" ? null : \"variable\"\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"/\" && maybeEnd) {\r\n      state.tokenize.pop();\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction expectExpression(last, newline) {\r\n  return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\r\n    last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\r\n    (last == \"standalone\" && !newline);\r\n}\r\n\r\nfunction Context(indented, column, type, align, prev) {\r\n  this.indented = indented;\r\n  this.column = column;\r\n  this.type = type;\r\n  this.align = align;\r\n  this.prev = prev;\r\n}\r\nfunction pushContext(state, col, type) {\r\n  return state.context = new Context(state.indented, col, type, null, state.context);\r\n}\r\nfunction popContext(state) {\r\n  var t = state.context.type;\r\n  if (t == \")\" || t == \"]\" || t == \"}\")\r\n    state.indented = state.context.indented;\r\n  return state.context = state.context.prev;\r\n}\r\n\r\n// Interface\r\n\r\nexport const groovy = {\r\n  name: \"groovy\",\r\n  startState: function(indentUnit) {\r\n    return {\r\n      tokenize: [tokenBase],\r\n      context: new Context(-indentUnit, 0, \"top\", false),\r\n      indented: 0,\r\n      startOfLine: true,\r\n      lastToken: null\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    var ctx = state.context;\r\n    if (stream.sol()) {\r\n      if (ctx.align == null) ctx.align = false;\r\n      state.indented = stream.indentation();\r\n      state.startOfLine = true;\r\n      // Automatic semicolon insertion\r\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\r\n        popContext(state); ctx = state.context;\r\n      }\r\n    }\r\n    if (stream.eatSpace()) return null;\r\n    curPunc = null;\r\n    var style = state.tokenize[state.tokenize.length-1](stream, state);\r\n    if (style == \"comment\") return style;\r\n    if (ctx.align == null) ctx.align = true;\r\n\r\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\r\n    // Handle indentation for {x -> \\n ... }\r\n    else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\r\n      popContext(state);\r\n      state.context.align = false;\r\n    }\r\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\r\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\r\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\r\n    else if (curPunc == \"}\") {\r\n      while (ctx.type == \"statement\") ctx = popContext(state);\r\n      if (ctx.type == \"}\") ctx = popContext(state);\r\n      while (ctx.type == \"statement\") ctx = popContext(state);\r\n    }\r\n    else if (curPunc == ctx.type) popContext(state);\r\n    else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\r\n      pushContext(state, stream.column(), \"statement\");\r\n    state.startOfLine = false;\r\n    state.lastToken = curPunc || style;\r\n    return style;\r\n  },\r\n\r\n  indent: function(state, textAfter, cx) {\r\n    if (!state.tokenize[state.tokenize.length-1].isBase) return null;\r\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\r\n    if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\r\n    var closing = firstChar == ctx.type;\r\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);\r\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\r\n    else return ctx.indented + (closing ? 0 : cx.unit);\r\n  },\r\n\r\n  languageData: {\r\n    indentOnInput: /^\\s*[{}]$/,\r\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\r\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["words", "stream", "state"]
}
