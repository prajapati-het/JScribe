{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/julia.js"],
  "sourcesContent": ["function wordRegexp(words, end, pre) {\r\n  if (typeof pre === \"undefined\") pre = \"\";\r\n  if (typeof end === \"undefined\") { end = \"\\\\b\"; }\r\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\r\n}\r\n\r\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\r\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\r\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\r\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\r\n\r\nvar asciiOperatorsList = [\r\n  \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\r\n  \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\r\n];\r\nvar operators = wordRegexp([\r\n  \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\r\n  \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\r\n  \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\r\n  \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\r\n  \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\r\n  \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\r\n], \"\");\r\nvar delimiters = /^[;,()[\\]{}]/;\r\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\r\n\r\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\r\n\r\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\r\n                   \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\r\n                   \"finally\", \"catch\", \"do\"];\r\n\r\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\r\n\r\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\r\n                    \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\r\n                    \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\r\n                    \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\r\n                    \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\r\n                    \"bitstype\"];\r\n\r\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\r\n\r\nvar openers = wordRegexp(openersList);\r\nvar closers = wordRegexp(closersList);\r\nvar keywords = wordRegexp(keywordsList);\r\nvar builtins = wordRegexp(builtinsList);\r\n\r\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\r\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\r\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\r\n\r\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\r\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\r\n\r\nfunction inArray(state) {\r\n  return (state.nestedArrays > 0);\r\n}\r\n\r\nfunction inGenerator(state) {\r\n  return (state.nestedGenerators > 0);\r\n}\r\n\r\nfunction currentScope(state, n) {\r\n  if (typeof(n) === \"undefined\") { n = 0; }\r\n  if (state.scopes.length <= n) {\r\n    return null;\r\n  }\r\n  return state.scopes[state.scopes.length - (n + 1)];\r\n}\r\n\r\n// tokenizers\r\nfunction tokenBase(stream, state) {\r\n  // Handle multiline comments\r\n  if (stream.match('#=', false)) {\r\n    state.tokenize = tokenComment;\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  // Handle scope changes\r\n  var leavingExpr = state.leavingExpr;\r\n  if (stream.sol()) {\r\n    leavingExpr = false;\r\n  }\r\n  state.leavingExpr = false;\r\n\r\n  if (leavingExpr) {\r\n    if (stream.match(/^'+/)) {\r\n      return \"operator\";\r\n    }\r\n  }\r\n\r\n  if (stream.match(/\\.{4,}/)) {\r\n    return \"error\";\r\n  } else if (stream.match(/\\.{1,3}/)) {\r\n    return \"operator\";\r\n  }\r\n\r\n  if (stream.eatSpace()) {\r\n    return null;\r\n  }\r\n\r\n  var ch = stream.peek();\r\n\r\n  // Handle single line comments\r\n  if (ch === '#') {\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n\r\n  if (ch === '[') {\r\n    state.scopes.push('[');\r\n    state.nestedArrays++;\r\n  }\r\n\r\n  if (ch === '(') {\r\n    state.scopes.push('(');\r\n    state.nestedGenerators++;\r\n  }\r\n\r\n  if (inArray(state) && ch === ']') {\r\n    while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\r\n    state.scopes.pop();\r\n    state.nestedArrays--;\r\n    state.leavingExpr = true;\r\n  }\r\n\r\n  if (inGenerator(state) && ch === ')') {\r\n    while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\r\n    state.scopes.pop();\r\n    state.nestedGenerators--;\r\n    state.leavingExpr = true;\r\n  }\r\n\r\n  if (inArray(state)) {\r\n    if (state.lastToken == \"end\" && stream.match(':')) {\r\n      return \"operator\";\r\n    }\r\n    if (stream.match('end')) {\r\n      return \"number\";\r\n    }\r\n  }\r\n\r\n  var match;\r\n  if (match = stream.match(openers, false)) {\r\n    state.scopes.push(match[0]);\r\n  }\r\n\r\n  if (stream.match(closers, false)) {\r\n    state.scopes.pop();\r\n  }\r\n\r\n  // Handle type annotations\r\n  if (stream.match(/^::(?![:\\$])/)) {\r\n    state.tokenize = tokenAnnotation;\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  // Handle symbols\r\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\r\n    return \"builtin\";\r\n  }\r\n\r\n  // Handle parametric types\r\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\r\n  //  return \"builtin\";\r\n  //}\r\n\r\n  // Handle operators and Delimiters\r\n  if (stream.match(operators)) {\r\n    return \"operator\";\r\n  }\r\n\r\n  // Handle Number Literals\r\n  if (stream.match(/^\\.?\\d/, false)) {\r\n    var imMatcher = RegExp(/^im\\b/);\r\n    var numberLiteral = false;\r\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\r\n    // Integers\r\n    if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\r\n    if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\r\n    if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\r\n    // Floats\r\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\r\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\r\n    if (numberLiteral) {\r\n      // Integer literals may be \"long\"\r\n      stream.match(imMatcher);\r\n      state.leavingExpr = true;\r\n      return \"number\";\r\n    }\r\n  }\r\n\r\n  // Handle Chars\r\n  if (stream.match(\"'\")) {\r\n    state.tokenize = tokenChar;\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  // Handle Strings\r\n  if (stream.match(stringPrefixes)) {\r\n    state.tokenize = tokenStringFactory(stream.current());\r\n    return state.tokenize(stream, state);\r\n  }\r\n\r\n  if (stream.match(macro) || stream.match(macroOperators)) {\r\n    return \"meta\";\r\n  }\r\n\r\n  if (stream.match(delimiters)) {\r\n    return null;\r\n  }\r\n\r\n  if (stream.match(keywords)) {\r\n    return \"keyword\";\r\n  }\r\n\r\n  if (stream.match(builtins)) {\r\n    return \"builtin\";\r\n  }\r\n\r\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\r\n      state.lastToken == \"macro\" || state.lastToken == \"type\" ||\r\n      state.lastToken == \"struct\" || state.lastToken == \"immutable\";\r\n\r\n  if (stream.match(identifiers)) {\r\n    if (isDefinition) {\r\n      if (stream.peek() === '.') {\r\n        state.isDefinition = true;\r\n        return \"variable\";\r\n      }\r\n      state.isDefinition = false;\r\n      return \"def\";\r\n    }\r\n    state.leavingExpr = true;\r\n    return \"variable\";\r\n  }\r\n\r\n  // Handle non-detected items\r\n  stream.next();\r\n  return \"error\";\r\n}\r\n\r\nfunction tokenAnnotation(stream, state) {\r\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\r\n  if (stream.match('{')) {\r\n    state.nestedParameters++;\r\n  } else if (stream.match('}') && state.nestedParameters > 0) {\r\n    state.nestedParameters--;\r\n  }\r\n  if (state.nestedParameters > 0) {\r\n    stream.match(/.*?(?={|})/) || stream.next();\r\n  } else if (state.nestedParameters == 0) {\r\n    state.tokenize = tokenBase;\r\n  }\r\n  return \"builtin\";\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  if (stream.match('#=')) {\r\n    state.nestedComments++;\r\n  }\r\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\r\n    stream.skipToEnd();\r\n  }\r\n  if (stream.match('=#')) {\r\n    state.nestedComments--;\r\n    if (state.nestedComments == 0)\r\n      state.tokenize = tokenBase;\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenChar(stream, state) {\r\n  var isChar = false, match;\r\n  if (stream.match(chars)) {\r\n    isChar = true;\r\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\r\n    var value = parseInt(match[1], 16);\r\n    if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\r\n      isChar = true;\r\n      stream.next();\r\n    }\r\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\r\n    var value = parseInt(match[1], 16);\r\n    if (value <= 1114111) { // U+10FFFF\r\n      isChar = true;\r\n      stream.next();\r\n    }\r\n  }\r\n  if (isChar) {\r\n    state.leavingExpr = true;\r\n    state.tokenize = tokenBase;\r\n    return \"string\";\r\n  }\r\n  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\r\n  if (stream.match(\"'\")) { state.tokenize = tokenBase; }\r\n  return \"error\";\r\n}\r\n\r\nfunction tokenStringFactory(delimiter) {\r\n  if (delimiter.substr(-3) === '\"\"\"') {\r\n    delimiter = '\"\"\"';\r\n  } else if (delimiter.substr(-1) === '\"') {\r\n    delimiter = '\"';\r\n  }\r\n  function tokenString(stream, state) {\r\n    if (stream.eat('\\\\')) {\r\n      stream.next();\r\n    } else if (stream.match(delimiter)) {\r\n      state.tokenize = tokenBase;\r\n      state.leavingExpr = true;\r\n      return \"string\";\r\n    } else {\r\n      stream.eat(/[`\"]/);\r\n    }\r\n    stream.eatWhile(/[^\\\\`\"]/);\r\n    return \"string\";\r\n  }\r\n  return tokenString;\r\n}\r\n\r\nexport const julia = {\r\n  name: \"julia\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      scopes: [],\r\n      lastToken: null,\r\n      leavingExpr: false,\r\n      isDefinition: false,\r\n      nestedArrays: 0,\r\n      nestedComments: 0,\r\n      nestedGenerators: 0,\r\n      nestedParameters: 0,\r\n      firstParenPos: -1\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    var style = state.tokenize(stream, state);\r\n    var current = stream.current();\r\n\r\n    if (current && style) {\r\n      state.lastToken = current;\r\n    }\r\n\r\n    return style;\r\n  },\r\n\r\n  indent: function(state, textAfter, cx) {\r\n    var delta = 0;\r\n    if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\r\n         /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\r\n         /^finally/.test(textAfter) ) {\r\n      delta = -1;\r\n    }\r\n    return (state.scopes.length + delta) * cx.unit;\r\n  },\r\n\r\n  languageData: {\r\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\r\n    commentTokens: {line: \"#\", block: {open: \"#=\", close: \"=#\"}},\r\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\r\n    autocomplete: keywordsList.concat(builtinsList)\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
