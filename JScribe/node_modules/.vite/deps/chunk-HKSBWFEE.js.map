{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/turtle.js"],
  "sourcesContent": ["var curPunc;\r\n\r\nfunction wordRegexp(words) {\r\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\r\n}\r\nvar ops = wordRegexp([]);\r\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\r\nvar operatorChars = /[*+\\-<>=&|]/;\r\n\r\nfunction tokenBase(stream, state) {\r\n  var ch = stream.next();\r\n  curPunc = null;\r\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\r\n    stream.match(/^[^\\s\\u00a0>]*>?/);\r\n    return \"atom\";\r\n  }\r\n  else if (ch == \"\\\"\" || ch == \"'\") {\r\n    state.tokenize = tokenLiteral(ch);\r\n    return state.tokenize(stream, state);\r\n  }\r\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\r\n    curPunc = ch;\r\n    return null;\r\n  }\r\n  else if (ch == \"#\") {\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n  else if (operatorChars.test(ch)) {\r\n    stream.eatWhile(operatorChars);\r\n    return null;\r\n  }\r\n  else if (ch == \":\") {\r\n    return \"operator\";\r\n  } else {\r\n    stream.eatWhile(/[_\\w\\d]/);\r\n    if(stream.peek() == \":\") {\r\n      return \"variableName.special\";\r\n    } else {\r\n      var word = stream.current();\r\n\r\n      if(keywords.test(word)) {\r\n        return \"meta\";\r\n      }\r\n\r\n      if(ch >= \"A\" && ch <= \"Z\") {\r\n        return \"comment\";\r\n      } else {\r\n        return \"keyword\";\r\n      }\r\n    }\r\n    var word = stream.current();\r\n    if (ops.test(word))\r\n      return null;\r\n    else if (keywords.test(word))\r\n      return \"meta\";\r\n    else\r\n      return \"variable\";\r\n  }\r\n}\r\n\r\nfunction tokenLiteral(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, ch;\r\n    while ((ch = stream.next()) != null) {\r\n      if (ch == quote && !escaped) {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n      escaped = !escaped && ch == \"\\\\\";\r\n    }\r\n    return \"string\";\r\n  };\r\n}\r\n\r\nfunction pushContext(state, type, col) {\r\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\r\n}\r\nfunction popContext(state) {\r\n  state.indent = state.context.indent;\r\n  state.context = state.context.prev;\r\n}\r\n\r\nexport const turtle = {\r\n  name: \"turtle\",\r\n  startState: function() {\r\n    return {tokenize: tokenBase,\r\n            context: null,\r\n            indent: 0,\r\n            col: 0};\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    if (stream.sol()) {\r\n      if (state.context && state.context.align == null) state.context.align = false;\r\n      state.indent = stream.indentation();\r\n    }\r\n    if (stream.eatSpace()) return null;\r\n    var style = state.tokenize(stream, state);\r\n\r\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\r\n      state.context.align = true;\r\n    }\r\n\r\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\r\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\r\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\r\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\r\n      while (state.context && state.context.type == \"pattern\") popContext(state);\r\n      if (state.context && curPunc == state.context.type) popContext(state);\r\n    }\r\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\r\n    else if (/atom|string|variable/.test(style) && state.context) {\r\n      if (/[\\}\\]]/.test(state.context.type))\r\n        pushContext(state, \"pattern\", stream.column());\r\n      else if (state.context.type == \"pattern\" && !state.context.align) {\r\n        state.context.align = true;\r\n        state.context.col = stream.column();\r\n      }\r\n    }\r\n\r\n    return style;\r\n  },\r\n\r\n  indent: function(state, textAfter, cx) {\r\n    var firstChar = textAfter && textAfter.charAt(0);\r\n    var context = state.context;\r\n    if (/[\\]\\}]/.test(firstChar))\r\n      while (context && context.type == \"pattern\") context = context.prev;\r\n\r\n    var closing = context && firstChar == context.type;\r\n    if (!context)\r\n      return 0;\r\n    else if (context.type == \"pattern\")\r\n      return context.col;\r\n    else if (context.align)\r\n      return context.col + (closing ? 0 : 1);\r\n    else\r\n      return context.indent + (closing ? 0 : cx.unit);\r\n  },\r\n\r\n  languageData: {\r\n    commentTokens: {line: \"#\"}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
