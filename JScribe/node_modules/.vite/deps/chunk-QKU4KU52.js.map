{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/velocity.js"],
  "sourcesContent": ["function parseWords(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n  return obj;\r\n}\r\n\r\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\r\n                          \"#{end} #{else} #{break} #{stop}\");\r\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\r\n                           \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\r\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\r\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\r\n\r\nfunction chain(stream, state, f) {\r\n  state.tokenize = f;\r\n  return f(stream, state);\r\n}\r\nfunction tokenBase(stream, state) {\r\n  var beforeParams = state.beforeParams;\r\n  state.beforeParams = false;\r\n  var ch = stream.next();\r\n  // start of unparsed string?\r\n  if ((ch == \"'\") && !state.inString && state.inParams) {\r\n    state.lastTokenWasBuiltin = false;\r\n    return chain(stream, state, tokenString(ch));\r\n  }\r\n  // start of parsed string?\r\n  else if ((ch == '\"')) {\r\n    state.lastTokenWasBuiltin = false;\r\n    if (state.inString) {\r\n      state.inString = false;\r\n      return \"string\";\r\n    }\r\n    else if (state.inParams)\r\n      return chain(stream, state, tokenString(ch));\r\n  }\r\n  // is it one of the special signs []{}().,;? Separator?\r\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\r\n    if (ch == \"(\" && beforeParams)\r\n      state.inParams = true;\r\n    else if (ch == \")\") {\r\n      state.inParams = false;\r\n      state.lastTokenWasBuiltin = true;\r\n    }\r\n    return null;\r\n  }\r\n  // start of a number value?\r\n  else if (/\\d/.test(ch)) {\r\n    state.lastTokenWasBuiltin = false;\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    return \"number\";\r\n  }\r\n  // multi line comment?\r\n  else if (ch == \"#\" && stream.eat(\"*\")) {\r\n    state.lastTokenWasBuiltin = false;\r\n    return chain(stream, state, tokenComment);\r\n  }\r\n  // unparsed content?\r\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\r\n    state.lastTokenWasBuiltin = false;\r\n    return chain(stream, state, tokenUnparsed);\r\n  }\r\n  // single line comment?\r\n  else if (ch == \"#\" && stream.eat(\"#\")) {\r\n    state.lastTokenWasBuiltin = false;\r\n    stream.skipToEnd();\r\n    return \"comment\";\r\n  }\r\n  // variable?\r\n  else if (ch == \"$\") {\r\n    stream.eat(\"!\");\r\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\r\n    // is it one of the specials?\r\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\r\n      return \"keyword\";\r\n    }\r\n    else {\r\n      state.lastTokenWasBuiltin = true;\r\n      state.beforeParams = true;\r\n      return \"builtin\";\r\n    }\r\n  }\r\n  // is it a operator?\r\n  else if (isOperatorChar.test(ch)) {\r\n    state.lastTokenWasBuiltin = false;\r\n    stream.eatWhile(isOperatorChar);\r\n    return \"operator\";\r\n  }\r\n  else {\r\n    // get the whole word\r\n    stream.eatWhile(/[\\w\\$_{}@]/);\r\n    var word = stream.current();\r\n    // is it one of the listed keywords?\r\n    if (keywords && keywords.propertyIsEnumerable(word))\r\n      return \"keyword\";\r\n    // is it one of the listed functions?\r\n    if (functions && functions.propertyIsEnumerable(word) ||\r\n        (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\r\n        !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\r\n      state.beforeParams = true;\r\n      state.lastTokenWasBuiltin = false;\r\n      return \"keyword\";\r\n    }\r\n    if (state.inString) {\r\n      state.lastTokenWasBuiltin = false;\r\n      return \"string\";\r\n    }\r\n    if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\r\n      return \"builtin\";\r\n    // default: just a \"word\"\r\n    state.lastTokenWasBuiltin = false;\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if ((next == quote) && !escaped) {\r\n        end = true;\r\n        break;\r\n      }\r\n      if (quote=='\"' && stream.peek() == '$' && !escaped) {\r\n        state.inString = true;\r\n        end = true;\r\n        break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end) state.tokenize = tokenBase;\r\n    return \"string\";\r\n  };\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"#\" && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction tokenUnparsed(stream, state) {\r\n  var maybeEnd = 0, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"#\" && maybeEnd == 2) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    if (ch == \"]\")\r\n      maybeEnd++;\r\n    else if (ch != \" \")\r\n      maybeEnd = 0;\r\n  }\r\n  return \"meta\";\r\n}\r\n// Interface\r\n\r\nexport const velocity = {\r\n  name: \"velocity\",\r\n\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      beforeParams: false,\r\n      inParams: false,\r\n      inString: false,\r\n      lastTokenWasBuiltin: false\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    if (stream.eatSpace()) return null;\r\n    return state.tokenize(stream, state);\r\n  },\r\n  languageData: {\r\n    commentTokens: {line: \"##\", block: {open: \"#*\", close: \"*#\"}}\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
