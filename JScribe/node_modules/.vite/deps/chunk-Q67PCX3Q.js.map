{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/perl.js"],
  "sourcesContent": ["\r\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\r\nfunction look(stream, c){\r\n  return stream.string.charAt(stream.pos+(c||0));\r\n}\r\n\r\n// return a part of prefix of current stream from current position\r\nfunction prefix(stream, c){\r\n  if(c){\r\n    var x=stream.pos-c;\r\n    return stream.string.substr((x>=0?x:0),c);}\r\n  else{\r\n    return stream.string.substr(0,stream.pos-1);\r\n  }\r\n}\r\n\r\n// return a part of suffix of current stream from current position\r\nfunction suffix(stream, c){\r\n  var y=stream.string.length;\r\n  var x=y-stream.pos+1;\r\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\r\n}\r\n\r\n// eating and vomiting a part of stream from current position\r\nfunction eatSuffix(stream, c){\r\n  var x=stream.pos+c;\r\n  var y;\r\n  if(x<=0)\r\n    stream.pos=0;\r\n  else if(x>=(y=stream.string.length-1))\r\n    stream.pos=y;\r\n  else\r\n    stream.pos=x;\r\n}\r\n\r\n// http://perldoc.perl.org\r\nvar PERL={                                      //   null - magic touch\r\n  //   1 - keyword\r\n  //   2 - def\r\n  //   3 - atom\r\n  //   4 - operator\r\n  //   5 - builtin (predefined)\r\n  //   [x,y] - x=1,2,3; y=must be defined if x{...}\r\n  //      PERL operators\r\n  '->':   4,\r\n  '++':   4,\r\n  '--':   4,\r\n  '**':   4,\r\n  //   ! ~ \\ and unary + and -\r\n  '=~':   4,\r\n  '!~':   4,\r\n  '*':   4,\r\n  '/':   4,\r\n  '%':   4,\r\n  'x':   4,\r\n  '+':   4,\r\n  '-':   4,\r\n  '.':   4,\r\n  '<<':   4,\r\n  '>>':   4,\r\n  //   named unary operators\r\n  '<':   4,\r\n  '>':   4,\r\n  '<=':   4,\r\n  '>=':   4,\r\n  'lt':   4,\r\n  'gt':   4,\r\n  'le':   4,\r\n  'ge':   4,\r\n  '==':   4,\r\n  '!=':   4,\r\n  '<=>':   4,\r\n  'eq':   4,\r\n  'ne':   4,\r\n  'cmp':   4,\r\n  '~~':   4,\r\n  '&':   4,\r\n  '|':   4,\r\n  '^':   4,\r\n  '&&':   4,\r\n  '||':   4,\r\n  '//':   4,\r\n  '..':   4,\r\n  '...':   4,\r\n  '?':   4,\r\n  ':':   4,\r\n  '=':   4,\r\n  '+=':   4,\r\n  '-=':   4,\r\n  '*=':   4,  //   etc. ???\r\n  ',':   4,\r\n  '=>':   4,\r\n  '::':   4,\r\n  //   list operators (rightward)\r\n  'not':   4,\r\n  'and':   4,\r\n  'or':   4,\r\n  'xor':   4,\r\n  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\r\n  'BEGIN':   [5,1],\r\n  'END':   [5,1],\r\n  'PRINT':   [5,1],\r\n  'PRINTF':   [5,1],\r\n  'GETC':   [5,1],\r\n  'READ':   [5,1],\r\n  'READLINE':   [5,1],\r\n  'DESTROY':   [5,1],\r\n  'TIE':   [5,1],\r\n  'TIEHANDLE':   [5,1],\r\n  'UNTIE':   [5,1],\r\n  'STDIN':    5,\r\n  'STDIN_TOP':    5,\r\n  'STDOUT':    5,\r\n  'STDOUT_TOP':    5,\r\n  'STDERR':    5,\r\n  'STDERR_TOP':    5,\r\n  '$ARG':    5,\r\n  '$_':    5,\r\n  '@ARG':    5,\r\n  '@_':    5,\r\n  '$LIST_SEPARATOR':    5,\r\n  '$\"':    5,\r\n  '$PROCESS_ID':    5,\r\n  '$PID':    5,\r\n  '$$':    5,\r\n  '$REAL_GROUP_ID':    5,\r\n  '$GID':    5,\r\n  '$(':    5,\r\n  '$EFFECTIVE_GROUP_ID':    5,\r\n  '$EGID':    5,\r\n  '$)':    5,\r\n  '$PROGRAM_NAME':    5,\r\n  '$0':    5,\r\n  '$SUBSCRIPT_SEPARATOR':    5,\r\n  '$SUBSEP':    5,\r\n  '$;':    5,\r\n  '$REAL_USER_ID':    5,\r\n  '$UID':    5,\r\n  '$<':    5,\r\n  '$EFFECTIVE_USER_ID':    5,\r\n  '$EUID':    5,\r\n  '$>':    5,\r\n  '$a':    5,\r\n  '$b':    5,\r\n  '$COMPILING':    5,\r\n  '$^C':    5,\r\n  '$DEBUGGING':    5,\r\n  '$^D':    5,\r\n  '${^ENCODING}':    5,\r\n  '$ENV':    5,\r\n  '%ENV':    5,\r\n  '$SYSTEM_FD_MAX':    5,\r\n  '$^F':    5,\r\n  '@F':    5,\r\n  '${^GLOBAL_PHASE}':    5,\r\n  '$^H':    5,\r\n  '%^H':    5,\r\n  '@INC':    5,\r\n  '%INC':    5,\r\n  '$INPLACE_EDIT':    5,\r\n  '$^I':    5,\r\n  '$^M':    5,\r\n  '$OSNAME':    5,\r\n  '$^O':    5,\r\n  '${^OPEN}':    5,\r\n  '$PERLDB':    5,\r\n  '$^P':    5,\r\n  '$SIG':    5,\r\n  '%SIG':    5,\r\n  '$BASETIME':    5,\r\n  '$^T':    5,\r\n  '${^TAINT}':    5,\r\n  '${^UNICODE}':    5,\r\n  '${^UTF8CACHE}':    5,\r\n  '${^UTF8LOCALE}':    5,\r\n  '$PERL_VERSION':    5,\r\n  '$^V':    5,\r\n  '${^WIN32_SLOPPY_STAT}':    5,\r\n  '$EXECUTABLE_NAME':    5,\r\n  '$^X':    5,\r\n  '$1':    5, // - regexp $1, $2...\r\n  '$MATCH':    5,\r\n  '$&':    5,\r\n  '${^MATCH}':    5,\r\n  '$PREMATCH':    5,\r\n  '$`':    5,\r\n  '${^PREMATCH}':    5,\r\n  '$POSTMATCH':    5,\r\n  \"$'\":    5,\r\n  '${^POSTMATCH}':    5,\r\n  '$LAST_PAREN_MATCH':    5,\r\n  '$+':    5,\r\n  '$LAST_SUBMATCH_RESULT':    5,\r\n  '$^N':    5,\r\n  '@LAST_MATCH_END':    5,\r\n  '@+':    5,\r\n  '%LAST_PAREN_MATCH':    5,\r\n  '%+':    5,\r\n  '@LAST_MATCH_START':    5,\r\n  '@-':    5,\r\n  '%LAST_MATCH_START':    5,\r\n  '%-':    5,\r\n  '$LAST_REGEXP_CODE_RESULT':    5,\r\n  '$^R':    5,\r\n  '${^RE_DEBUG_FLAGS}':    5,\r\n  '${^RE_TRIE_MAXBUF}':    5,\r\n  '$ARGV':    5,\r\n  '@ARGV':    5,\r\n  'ARGV':    5,\r\n  'ARGVOUT':    5,\r\n  '$OUTPUT_FIELD_SEPARATOR':    5,\r\n  '$OFS':    5,\r\n  '$,':    5,\r\n  '$INPUT_LINE_NUMBER':    5,\r\n  '$NR':    5,\r\n  '$.':    5,\r\n  '$INPUT_RECORD_SEPARATOR':    5,\r\n  '$RS':    5,\r\n  '$/':    5,\r\n  '$OUTPUT_RECORD_SEPARATOR':    5,\r\n  '$ORS':    5,\r\n  '$\\\\':    5,\r\n  '$OUTPUT_AUTOFLUSH':    5,\r\n  '$|':    5,\r\n  '$ACCUMULATOR':    5,\r\n  '$^A':    5,\r\n  '$FORMAT_FORMFEED':    5,\r\n  '$^L':    5,\r\n  '$FORMAT_PAGE_NUMBER':    5,\r\n  '$%':    5,\r\n  '$FORMAT_LINES_LEFT':    5,\r\n  '$-':    5,\r\n  '$FORMAT_LINE_BREAK_CHARACTERS':    5,\r\n  '$:':    5,\r\n  '$FORMAT_LINES_PER_PAGE':    5,\r\n  '$=':    5,\r\n  '$FORMAT_TOP_NAME':    5,\r\n  '$^':    5,\r\n  '$FORMAT_NAME':    5,\r\n  '$~':    5,\r\n  '${^CHILD_ERROR_NATIVE}':    5,\r\n  '$EXTENDED_OS_ERROR':    5,\r\n  '$^E':    5,\r\n  '$EXCEPTIONS_BEING_CAUGHT':    5,\r\n  '$^S':    5,\r\n  '$WARNING':    5,\r\n  '$^W':    5,\r\n  '${^WARNING_BITS}':    5,\r\n  '$OS_ERROR':    5,\r\n  '$ERRNO':    5,\r\n  '$!':    5,\r\n  '%OS_ERROR':    5,\r\n  '%ERRNO':    5,\r\n  '%!':    5,\r\n  '$CHILD_ERROR':    5,\r\n  '$?':    5,\r\n  '$EVAL_ERROR':    5,\r\n  '$@':    5,\r\n  '$OFMT':    5,\r\n  '$#':    5,\r\n  '$*':    5,\r\n  '$ARRAY_BASE':    5,\r\n  '$[':    5,\r\n  '$OLD_PERL_VERSION':    5,\r\n  '$]':    5,\r\n  //      PERL blocks\r\n  'if':[1,1],\r\n  elsif:[1,1],\r\n  'else':[1,1],\r\n  'while':[1,1],\r\n  unless:[1,1],\r\n  'for':[1,1],\r\n  foreach:[1,1],\r\n  //      PERL functions\r\n  'abs':1,     // - absolute value function\r\n  accept:1,     // - accept an incoming socket connect\r\n  alarm:1,     // - schedule a SIGALRM\r\n  'atan2':1,     // - arctangent of Y/X in the range -PI to PI\r\n  bind:1,     // - binds an address to a socket\r\n  binmode:1,     // - prepare binary files for I/O\r\n  bless:1,     // - create an object\r\n  bootstrap:1,     //\r\n  'break':1,     // - break out of a \"given\" block\r\n  caller:1,     // - get context of the current subroutine call\r\n  chdir:1,     // - change your current working directory\r\n  chmod:1,     // - changes the permissions on a list of files\r\n  chomp:1,     // - remove a trailing record separator from a string\r\n  chop:1,     // - remove the last character from a string\r\n  chown:1,     // - change the ownership on a list of files\r\n  chr:1,     // - get character this number represents\r\n  chroot:1,     // - make directory new root for path lookups\r\n  close:1,     // - close file (or pipe or socket) handle\r\n  closedir:1,     // - close directory handle\r\n  connect:1,     // - connect to a remote socket\r\n  'continue':[1,1], // - optional trailing block in a while or foreach\r\n  'cos':1,     // - cosine function\r\n  crypt:1,     // - one-way passwd-style encryption\r\n  dbmclose:1,     // - breaks binding on a tied dbm file\r\n  dbmopen:1,     // - create binding on a tied dbm file\r\n  'default':1,     //\r\n  defined:1,     // - test whether a value, variable, or function is defined\r\n  'delete':1,     // - deletes a value from a hash\r\n  die:1,     // - raise an exception or bail out\r\n  'do':1,     // - turn a BLOCK into a TERM\r\n  dump:1,     // - create an immediate core dump\r\n  each:1,     // - retrieve the next key/value pair from a hash\r\n  endgrent:1,     // - be done using group file\r\n  endhostent:1,     // - be done using hosts file\r\n  endnetent:1,     // - be done using networks file\r\n  endprotoent:1,     // - be done using protocols file\r\n  endpwent:1,     // - be done using passwd file\r\n  endservent:1,     // - be done using services file\r\n  eof:1,     // - test a filehandle for its end\r\n  'eval':1,     // - catch exceptions or compile and run code\r\n  'exec':1,     // - abandon this program to run another\r\n  exists:1,     // - test whether a hash key is present\r\n  exit:1,     // - terminate this program\r\n  'exp':1,     // - raise I to a power\r\n  fcntl:1,     // - file control system call\r\n  fileno:1,     // - return file descriptor from filehandle\r\n  flock:1,     // - lock an entire file with an advisory lock\r\n  fork:1,     // - create a new process just like this one\r\n  format:1,     // - declare a picture format with use by the write() function\r\n  formline:1,     // - internal function used for formats\r\n  getc:1,     // - get the next character from the filehandle\r\n  getgrent:1,     // - get next group record\r\n  getgrgid:1,     // - get group record given group user ID\r\n  getgrnam:1,     // - get group record given group name\r\n  gethostbyaddr:1,     // - get host record given its address\r\n  gethostbyname:1,     // - get host record given name\r\n  gethostent:1,     // - get next hosts record\r\n  getlogin:1,     // - return who logged in at this tty\r\n  getnetbyaddr:1,     // - get network record given its address\r\n  getnetbyname:1,     // - get networks record given name\r\n  getnetent:1,     // - get next networks record\r\n  getpeername:1,     // - find the other end of a socket connection\r\n  getpgrp:1,     // - get process group\r\n  getppid:1,     // - get parent process ID\r\n  getpriority:1,     // - get current nice value\r\n  getprotobyname:1,     // - get protocol record given name\r\n  getprotobynumber:1,     // - get protocol record numeric protocol\r\n  getprotoent:1,     // - get next protocols record\r\n  getpwent:1,     // - get next passwd record\r\n  getpwnam:1,     // - get passwd record given user login name\r\n  getpwuid:1,     // - get passwd record given user ID\r\n  getservbyname:1,     // - get services record given its name\r\n  getservbyport:1,     // - get services record given numeric port\r\n  getservent:1,     // - get next services record\r\n  getsockname:1,     // - retrieve the sockaddr for a given socket\r\n  getsockopt:1,     // - get socket options on a given socket\r\n  given:1,     //\r\n  glob:1,     // - expand filenames using wildcards\r\n  gmtime:1,     // - convert UNIX time into record or string using Greenwich time\r\n  'goto':1,     // - create spaghetti code\r\n  grep:1,     // - locate elements in a list test true against a given criterion\r\n  hex:1,     // - convert a string to a hexadecimal number\r\n  'import':1,     // - patch a module's namespace into your own\r\n  index:1,     // - find a substring within a string\r\n  'int':1,     // - get the integer portion of a number\r\n  ioctl:1,     // - system-dependent device control system call\r\n  'join':1,     // - join a list into a string using a separator\r\n  keys:1,     // - retrieve list of indices from a hash\r\n  kill:1,     // - send a signal to a process or process group\r\n  last:1,     // - exit a block prematurely\r\n  lc:1,     // - return lower-case version of a string\r\n  lcfirst:1,     // - return a string with just the next letter in lower case\r\n  length:1,     // - return the number of bytes in a string\r\n  'link':1,     // - create a hard link in the filesystem\r\n  listen:1,     // - register your socket as a server\r\n  local: 2,    // - create a temporary value for a global variable (dynamic scoping)\r\n  localtime:1,     // - convert UNIX time into record or string using local time\r\n  lock:1,     // - get a thread lock on a variable, subroutine, or method\r\n  'log':1,     // - retrieve the natural logarithm for a number\r\n  lstat:1,     // - stat a symbolic link\r\n  m:null,  // - match a string with a regular expression pattern\r\n  map:1,     // - apply a change to a list to get back a new list with the changes\r\n  mkdir:1,     // - create a directory\r\n  msgctl:1,     // - SysV IPC message control operations\r\n  msgget:1,     // - get SysV IPC message queue\r\n  msgrcv:1,     // - receive a SysV IPC message from a message queue\r\n  msgsnd:1,     // - send a SysV IPC message to a message queue\r\n  my: 2,    // - declare and assign a local variable (lexical scoping)\r\n  'new':1,     //\r\n  next:1,     // - iterate a block prematurely\r\n  no:1,     // - unimport some module symbols or semantics at compile time\r\n  oct:1,     // - convert a string to an octal number\r\n  open:1,     // - open a file, pipe, or descriptor\r\n  opendir:1,     // - open a directory\r\n  ord:1,     // - find a character's numeric representation\r\n  our: 2,    // - declare and assign a package variable (lexical scoping)\r\n  pack:1,     // - convert a list into a binary representation\r\n  'package':1,     // - declare a separate global namespace\r\n  pipe:1,     // - open a pair of connected filehandles\r\n  pop:1,     // - remove the last element from an array and return it\r\n  pos:1,     // - find or set the offset for the last/next m//g search\r\n  print:1,     // - output a list to a filehandle\r\n  printf:1,     // - output a formatted list to a filehandle\r\n  prototype:1,     // - get the prototype (if any) of a subroutine\r\n  push:1,     // - append one or more elements to an array\r\n  q:null,  // - singly quote a string\r\n  qq:null,  // - doubly quote a string\r\n  qr:null,  // - Compile pattern\r\n  quotemeta:null,  // - quote regular expression magic characters\r\n  qw:null,  // - quote a list of words\r\n  qx:null,  // - backquote quote a string\r\n  rand:1,     // - retrieve the next pseudorandom number\r\n  read:1,     // - fixed-length buffered input from a filehandle\r\n  readdir:1,     // - get a directory from a directory handle\r\n  readline:1,     // - fetch a record from a file\r\n  readlink:1,     // - determine where a symbolic link is pointing\r\n  readpipe:1,     // - execute a system command and collect standard output\r\n  recv:1,     // - receive a message over a Socket\r\n  redo:1,     // - start this loop iteration over again\r\n  ref:1,     // - find out the type of thing being referenced\r\n  rename:1,     // - change a filename\r\n  require:1,     // - load in external functions from a library at runtime\r\n  reset:1,     // - clear all variables of a given name\r\n  'return':1,     // - get out of a function early\r\n  reverse:1,     // - flip a string or a list\r\n  rewinddir:1,     // - reset directory handle\r\n  rindex:1,     // - right-to-left substring search\r\n  rmdir:1,     // - remove a directory\r\n  s:null,  // - replace a pattern with a string\r\n  say:1,     // - print with newline\r\n  scalar:1,     // - force a scalar context\r\n  seek:1,     // - reposition file pointer for random-access I/O\r\n  seekdir:1,     // - reposition directory pointer\r\n  select:1,     // - reset default output or do I/O multiplexing\r\n  semctl:1,     // - SysV semaphore control operations\r\n  semget:1,     // - get set of SysV semaphores\r\n  semop:1,     // - SysV semaphore operations\r\n  send:1,     // - send a message over a socket\r\n  setgrent:1,     // - prepare group file for use\r\n  sethostent:1,     // - prepare hosts file for use\r\n  setnetent:1,     // - prepare networks file for use\r\n  setpgrp:1,     // - set the process group of a process\r\n  setpriority:1,     // - set a process's nice value\r\n  setprotoent:1,     // - prepare protocols file for use\r\n  setpwent:1,     // - prepare passwd file for use\r\n  setservent:1,     // - prepare services file for use\r\n  setsockopt:1,     // - set some socket options\r\n  shift:1,     // - remove the first element of an array, and return it\r\n  shmctl:1,     // - SysV shared memory operations\r\n  shmget:1,     // - get SysV shared memory segment identifier\r\n  shmread:1,     // - read SysV shared memory\r\n  shmwrite:1,     // - write SysV shared memory\r\n  shutdown:1,     // - close down just half of a socket connection\r\n  'sin':1,     // - return the sine of a number\r\n  sleep:1,     // - block for some number of seconds\r\n  socket:1,     // - create a socket\r\n  socketpair:1,     // - create a pair of sockets\r\n  'sort':1,     // - sort a list of values\r\n  splice:1,     // - add or remove elements anywhere in an array\r\n  'split':1,     // - split up a string using a regexp delimiter\r\n  sprintf:1,     // - formatted print into a string\r\n  'sqrt':1,     // - square root function\r\n  srand:1,     // - seed the random number generator\r\n  stat:1,     // - get a file's status information\r\n  state:1,     // - declare and assign a state variable (persistent lexical scoping)\r\n  study:1,     // - optimize input data for repeated searches\r\n  'sub':1,     // - declare a subroutine, possibly anonymously\r\n  'substr':1,     // - get or alter a portion of a string\r\n  symlink:1,     // - create a symbolic link to a file\r\n  syscall:1,     // - execute an arbitrary system call\r\n  sysopen:1,     // - open a file, pipe, or descriptor\r\n  sysread:1,     // - fixed-length unbuffered input from a filehandle\r\n  sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite\r\n  system:1,     // - run a separate program\r\n  syswrite:1,     // - fixed-length unbuffered output to a filehandle\r\n  tell:1,     // - get current seekpointer on a filehandle\r\n  telldir:1,     // - get current seekpointer on a directory handle\r\n  tie:1,     // - bind a variable to an object class\r\n  tied:1,     // - get a reference to the object underlying a tied variable\r\n  time:1,     // - return number of seconds since 1970\r\n  times:1,     // - return elapsed time for self and child processes\r\n  tr:null,  // - transliterate a string\r\n  truncate:1,     // - shorten a file\r\n  uc:1,     // - return upper-case version of a string\r\n  ucfirst:1,     // - return a string with just the next letter in upper case\r\n  umask:1,     // - set file creation mode mask\r\n  undef:1,     // - remove a variable or function definition\r\n  unlink:1,     // - remove one link to a file\r\n  unpack:1,     // - convert binary structure into normal perl variables\r\n  unshift:1,     // - prepend more elements to the beginning of a list\r\n  untie:1,     // - break a tie binding to a variable\r\n  use:1,     // - load in a module at compile time\r\n  utime:1,     // - set a file's last access and modify times\r\n  values:1,     // - return a list of the values in a hash\r\n  vec:1,     // - test or set particular bits in a string\r\n  wait:1,     // - wait for any child process to die\r\n  waitpid:1,     // - wait for a particular child process to die\r\n  wantarray:1,     // - get void vs scalar vs list context of current subroutine call\r\n  warn:1,     // - print debugging info\r\n  when:1,     //\r\n  write:1,     // - print a picture record\r\n  y:null}; // - transliterate a string\r\n\r\nvar RXstyle=\"string.special\";\r\nvar RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\r\n\r\nfunction tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\r\n  state.chain=null;                               //                                                          12   3tail\r\n  state.style=null;\r\n  state.tail=null;\r\n  state.tokenize=function(stream,state){\r\n    var e=false,c,i=0;\r\n    while(c=stream.next()){\r\n      if(c===chain[i]&&!e){\r\n        if(chain[++i]!==undefined){\r\n          state.chain=chain[i];\r\n          state.style=style;\r\n          state.tail=tail;}\r\n        else if(tail)\r\n          stream.eatWhile(tail);\r\n        state.tokenize=tokenPerl;\r\n        return style;}\r\n      e=!e&&c==\"\\\\\";}\r\n    return style;};\r\n  return state.tokenize(stream,state);}\r\n\r\nfunction tokenSOMETHING(stream,state,string){\r\n  state.tokenize=function(stream,state){\r\n    if(stream.string==string)\r\n      state.tokenize=tokenPerl;\r\n    stream.skipToEnd();\r\n    return \"string\";};\r\n  return state.tokenize(stream,state);}\r\n\r\nfunction tokenPerl(stream,state){\r\n  if(stream.eatSpace())\r\n    return null;\r\n  if(state.chain)\r\n    return tokenChain(stream,state,state.chain,state.style,state.tail);\r\n  if(stream.match(/^(\\-?((\\d[\\d_]*)?\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F_]+|0b[01_]+|\\d[\\d_]*(e[+-]?\\d+)?)/))\r\n    return 'number';\r\n  if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\r\n    stream.eatWhile(/\\w/);\r\n    return tokenSOMETHING(stream,state,stream.current().substr(2));}\r\n  if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\r\n    return tokenSOMETHING(stream,state,'=cut');}\r\n  var ch=stream.next();\r\n  if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\r\n    if(prefix(stream, 3)==\"<<\"+ch){\r\n      var p=stream.pos;\r\n      stream.eatWhile(/\\w/);\r\n      var n=stream.current().substr(1);\r\n      if(n&&stream.eat(ch))\r\n        return tokenSOMETHING(stream,state,n);\r\n      stream.pos=p;}\r\n    return tokenChain(stream,state,[ch],\"string\");}\r\n  if(ch==\"q\"){\r\n    var c=look(stream, -2);\r\n    if(!(c&&/\\w/.test(c))){\r\n      c=look(stream, 0);\r\n      if(c==\"x\"){\r\n        c=look(stream, 1);\r\n        if(c==\"(\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\r\n        if(c==\"[\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\r\n        if(c==\"{\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\r\n        if(c==\"<\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\r\n        if(/[\\^'\"!~\\/]/.test(c)){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\r\n      else if(c==\"q\"){\r\n        c=look(stream, 1);\r\n        if(c==\"(\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\")\"],\"string\");}\r\n        if(c==\"[\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"]\"],\"string\");}\r\n        if(c==\"{\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"}\"],\"string\");}\r\n        if(c==\"<\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\">\"],\"string\");}\r\n        if(/[\\^'\"!~\\/]/.test(c)){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\r\n      else if(c==\"w\"){\r\n        c=look(stream, 1);\r\n        if(c==\"(\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\")\"],\"bracket\");}\r\n        if(c==\"[\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"]\"],\"bracket\");}\r\n        if(c==\"{\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"}\"],\"bracket\");}\r\n        if(c==\"<\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\">\"],\"bracket\");}\r\n        if(/[\\^'\"!~\\/]/.test(c)){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\r\n      else if(c==\"r\"){\r\n        c=look(stream, 1);\r\n        if(c==\"(\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\r\n        if(c==\"[\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\r\n        if(c==\"{\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\r\n        if(c==\"<\"){\r\n          eatSuffix(stream, 2);\r\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\r\n        if(/[\\^'\"!~\\/]/.test(c)){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\r\n      else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\r\n        if(c==\"(\"){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[\")\"],\"string\");}\r\n        if(c==\"[\"){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[\"]\"],\"string\");}\r\n        if(c==\"{\"){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[\"}\"],\"string\");}\r\n        if(c==\"<\"){\r\n          eatSuffix(stream, 1);\r\n          return tokenChain(stream,state,[\">\"],\"string\");}\r\n        if(/[\\^'\"!~\\/]/.test(c)){\r\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\r\n  if(ch==\"m\"){\r\n    var c=look(stream, -2);\r\n    if(!(c&&/\\w/.test(c))){\r\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\r\n      if(c){\r\n        if(/[\\^'\"!~\\/]/.test(c)){\r\n          return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\r\n        if(c==\"(\"){\r\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\r\n        if(c==\"[\"){\r\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\r\n        if(c==\"{\"){\r\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\r\n        if(c==\"<\"){\r\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\r\n  if(ch==\"s\"){\r\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\r\n    if(!c){\r\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\r\n      if(c){\r\n        if(c==\"[\")\r\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\r\n        if(c==\"{\")\r\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\r\n        if(c==\"<\")\r\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\r\n        if(c==\"(\")\r\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\r\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\r\n  if(ch==\"y\"){\r\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\r\n    if(!c){\r\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\r\n      if(c){\r\n        if(c==\"[\")\r\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\r\n        if(c==\"{\")\r\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\r\n        if(c==\"<\")\r\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\r\n        if(c==\"(\")\r\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\r\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\r\n  if(ch==\"t\"){\r\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\r\n    if(!c){\r\n      c=stream.eat(\"r\");if(c){\r\n        c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\r\n        if(c){\r\n          if(c==\"[\")\r\n            return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\r\n          if(c==\"{\")\r\n            return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\r\n          if(c==\"<\")\r\n            return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\r\n          if(c==\"(\")\r\n            return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\r\n          return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\r\n  if(ch==\"`\"){\r\n    return tokenChain(stream,state,[ch],\"builtin\");}\r\n  if(ch==\"/\"){\r\n    if(!/~\\s*$/.test(prefix(stream)))\r\n      return \"operator\";\r\n    else\r\n      return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\r\n  if(ch==\"$\"){\r\n    var p=stream.pos;\r\n    if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\r\n      return \"builtin\";\r\n    else\r\n      stream.pos=p;}\r\n  if(/[$@%]/.test(ch)){\r\n    var p=stream.pos;\r\n    if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\r\n      var c=stream.current();\r\n      if(PERL[c])\r\n        return \"builtin\";}\r\n    stream.pos=p;}\r\n  if(/[$@%&]/.test(ch)){\r\n    if(stream.eatWhile(/[\\w$]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$]/)&&stream.eat(\"}\")){\r\n      var c=stream.current();\r\n      if(PERL[c])\r\n        return \"builtin\";\r\n      else\r\n        return \"variable\";}}\r\n  if(ch==\"#\"){\r\n    if(look(stream, -2)!=\"$\"){\r\n      stream.skipToEnd();\r\n      return \"comment\";}}\r\n  if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\r\n    var p=stream.pos;\r\n    stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\r\n    if(PERL[stream.current()])\r\n      return \"operator\";\r\n    else\r\n      stream.pos=p;}\r\n  if(ch==\"_\"){\r\n    if(stream.pos==1){\r\n      if(suffix(stream, 6)==\"_END__\"){\r\n        return tokenChain(stream,state,['\\0'],\"comment\");}\r\n      else if(suffix(stream, 7)==\"_DATA__\"){\r\n        return tokenChain(stream,state,['\\0'],\"builtin\");}\r\n      else if(suffix(stream, 7)==\"_C__\"){\r\n        return tokenChain(stream,state,['\\0'],\"string\");}}}\r\n  if(/\\w/.test(ch)){\r\n    var p=stream.pos;\r\n    if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\r\n      return \"string\";\r\n    else\r\n      stream.pos=p;}\r\n  if(/[A-Z]/.test(ch)){\r\n    var l=look(stream, -2);\r\n    var p=stream.pos;\r\n    stream.eatWhile(/[A-Z_]/);\r\n    if(/[\\da-z]/.test(look(stream, 0))){\r\n      stream.pos=p;}\r\n    else{\r\n      var c=PERL[stream.current()];\r\n      if(!c)\r\n        return \"meta\";\r\n      if(c[1])\r\n        c=c[0];\r\n      if(l!=\":\"){\r\n        if(c==1)\r\n          return \"keyword\";\r\n        else if(c==2)\r\n          return \"def\";\r\n        else if(c==3)\r\n          return \"atom\";\r\n        else if(c==4)\r\n          return \"operator\";\r\n        else if(c==5)\r\n          return \"builtin\";\r\n        else\r\n          return \"meta\";}\r\n      else\r\n        return \"meta\";}}\r\n  if(/[a-zA-Z_]/.test(ch)){\r\n    var l=look(stream, -2);\r\n    stream.eatWhile(/\\w/);\r\n    var c=PERL[stream.current()];\r\n    if(!c)\r\n      return \"meta\";\r\n    if(c[1])\r\n      c=c[0];\r\n    if(l!=\":\"){\r\n      if(c==1)\r\n        return \"keyword\";\r\n      else if(c==2)\r\n        return \"def\";\r\n      else if(c==3)\r\n        return \"atom\";\r\n      else if(c==4)\r\n        return \"operator\";\r\n      else if(c==5)\r\n        return \"builtin\";\r\n      else\r\n        return \"meta\";}\r\n    else\r\n      return \"meta\";}\r\n  return null;}\r\n\r\nexport const perl = {\r\n  name: \"perl\",\r\n\r\n  startState: function() {\r\n    return {\r\n      tokenize: tokenPerl,\r\n      chain: null,\r\n      style: null,\r\n      tail: null\r\n    };\r\n  },\r\n  token: function(stream, state) {\r\n    return (state.tokenize || tokenPerl)(stream, state);\r\n  },\r\n  languageData: {\r\n    commentTokens: {line: \"#\"},\r\n    wordChars: \"$\"\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["stream", "state"]
}
