{
  "version": 3,
  "sources": ["../../@codemirror/legacy-modes/mode/ttcn.js"],
  "sourcesContent": ["function words(str) {\r\n  var obj = {}, words = str.split(\" \");\r\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n  return obj;\r\n}\r\n\r\nconst parserConfig = {\r\n  name: \"ttcn\",\r\n  keywords: words(\"activate address alive all alt altstep and and4b any\" +\r\n                  \" break case component const continue control deactivate\" +\r\n                  \" display do else encode enumerated except exception\" +\r\n                  \" execute extends extension external for from function\" +\r\n                  \" goto group if import in infinity inout interleave\" +\r\n                  \" label language length log match message mixed mod\" +\r\n                  \" modifies module modulepar mtc noblock not not4b nowait\" +\r\n                  \" of on optional or or4b out override param pattern port\" +\r\n                  \" procedure record recursive rem repeat return runs select\" +\r\n                  \" self sender set signature system template testcase to\" +\r\n                  \" type union value valueof var variant while with xor xor4b\"),\r\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\r\n                 \" decomp decvalue float2int float2str hex2bit hex2int\" +\r\n                 \" hex2oct hex2str int2bit int2char int2float int2hex\" +\r\n                 \" int2oct int2str int2unichar isbound ischosen ispresent\" +\r\n                 \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\r\n                 \" oct2str regexp replace rnd sizeof str2bit str2float\" +\r\n                 \" str2hex str2int str2oct substr unichar2int unichar2char\" +\r\n                 \" enum2int\"),\r\n  types: words(\"anytype bitstring boolean char charstring default float\" +\r\n               \" hexstring integer objid octetstring universal verdicttype timer\"),\r\n  timerOps: words(\"read running start stop timeout\"),\r\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\r\n                 \" reply send trigger\"),\r\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\r\n  verdictOps: words(\"getverdict setverdict\"),\r\n  sutOps: words(\"action\"),\r\n  functionOps: words(\"apply derefers refers\"),\r\n\r\n  verdictConsts: words(\"error fail inconc none pass\"),\r\n  booleanConsts: words(\"true false\"),\r\n  otherConsts: words(\"null NULL omit\"),\r\n\r\n  visibilityModifiers: words(\"private public friend\"),\r\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\r\n  multiLineStrings: true\r\n}\r\n\r\nvar wordList = []\r\nfunction add(obj) {\r\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\r\n    wordList.push(prop);\r\n}\r\nadd(parserConfig.keywords);\r\nadd(parserConfig.builtin);\r\nadd(parserConfig.timerOps);\r\nadd(parserConfig.portOps);\r\n\r\nvar keywords = parserConfig.keywords || {},\r\n    builtin = parserConfig.builtin || {},\r\n    timerOps = parserConfig.timerOps || {},\r\n    portOps  = parserConfig.portOps || {},\r\n    configOps = parserConfig.configOps || {},\r\n    verdictOps = parserConfig.verdictOps || {},\r\n    sutOps = parserConfig.sutOps || {},\r\n    functionOps = parserConfig.functionOps || {},\r\n\r\n    verdictConsts = parserConfig.verdictConsts || {},\r\n    booleanConsts = parserConfig.booleanConsts || {},\r\n    otherConsts   = parserConfig.otherConsts || {},\r\n\r\n    types = parserConfig.types || {},\r\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\r\n    templateMatch = parserConfig.templateMatch || {},\r\n    multiLineStrings = parserConfig.multiLineStrings,\r\n    indentStatements = parserConfig.indentStatements !== false;\r\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\r\nvar curPunc;\r\n\r\nfunction tokenBase(stream, state) {\r\n  var ch = stream.next();\r\n\r\n  if (ch == '\"' || ch == \"'\") {\r\n    state.tokenize = tokenString(ch);\r\n    return state.tokenize(stream, state);\r\n  }\r\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\r\n    curPunc = ch;\r\n    return \"punctuation\";\r\n  }\r\n  if (ch == \"#\"){\r\n    stream.skipToEnd();\r\n    return \"atom\";\r\n  }\r\n  if (ch == \"%\"){\r\n    stream.eatWhile(/\\b/);\r\n    return \"atom\";\r\n  }\r\n  if (/\\d/.test(ch)) {\r\n    stream.eatWhile(/[\\w\\.]/);\r\n    return \"number\";\r\n  }\r\n  if (ch == \"/\") {\r\n    if (stream.eat(\"*\")) {\r\n      state.tokenize = tokenComment;\r\n      return tokenComment(stream, state);\r\n    }\r\n    if (stream.eat(\"/\")) {\r\n      stream.skipToEnd();\r\n      return \"comment\";\r\n    }\r\n  }\r\n  if (isOperatorChar.test(ch)) {\r\n    if(ch == \"@\"){\r\n      if(stream.match(\"try\") || stream.match(\"catch\")\r\n         || stream.match(\"lazy\")){\r\n        return \"keyword\";\r\n      }\r\n    }\r\n    stream.eatWhile(isOperatorChar);\r\n    return \"operator\";\r\n  }\r\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\r\n  var cur = stream.current();\r\n\r\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\r\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\r\n\r\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\r\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\r\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\r\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\r\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\r\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\r\n\r\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\r\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\r\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\r\n\r\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\r\n  if (visibilityModifiers.propertyIsEnumerable(cur))\r\n    return \"modifier\";\r\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\r\n\r\n  return \"variable\";\r\n}\r\n\r\nfunction tokenString(quote) {\r\n  return function(stream, state) {\r\n    var escaped = false, next, end = false;\r\n    while ((next = stream.next()) != null) {\r\n      if (next == quote && !escaped){\r\n        var afterQuote = stream.peek();\r\n        //look if the character after the quote is like the B in '10100010'B\r\n        if (afterQuote){\r\n          afterQuote = afterQuote.toLowerCase();\r\n          if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\r\n            stream.next();\r\n        }\r\n        end = true; break;\r\n      }\r\n      escaped = !escaped && next == \"\\\\\";\r\n    }\r\n    if (end || !(escaped || multiLineStrings))\r\n      state.tokenize = null;\r\n    return \"string\";\r\n  };\r\n}\r\n\r\nfunction tokenComment(stream, state) {\r\n  var maybeEnd = false, ch;\r\n  while (ch = stream.next()) {\r\n    if (ch == \"/\" && maybeEnd) {\r\n      state.tokenize = null;\r\n      break;\r\n    }\r\n    maybeEnd = (ch == \"*\");\r\n  }\r\n  return \"comment\";\r\n}\r\n\r\nfunction Context(indented, column, type, align, prev) {\r\n  this.indented = indented;\r\n  this.column = column;\r\n  this.type = type;\r\n  this.align = align;\r\n  this.prev = prev;\r\n}\r\n\r\nfunction pushContext(state, col, type) {\r\n  var indent = state.indented;\r\n  if (state.context && state.context.type == \"statement\")\r\n    indent = state.context.indented;\r\n  return state.context = new Context(indent, col, type, null, state.context);\r\n}\r\n\r\nfunction popContext(state) {\r\n  var t = state.context.type;\r\n  if (t == \")\" || t == \"]\" || t == \"}\")\r\n    state.indented = state.context.indented;\r\n  return state.context = state.context.prev;\r\n}\r\n\r\n//Interface\r\nexport const ttcn = {\r\n  name: \"ttcn\",\r\n  startState: function() {\r\n    return {\r\n      tokenize: null,\r\n      context: new Context(0, 0, \"top\", false),\r\n      indented: 0,\r\n      startOfLine: true\r\n    };\r\n  },\r\n\r\n  token: function(stream, state) {\r\n    var ctx = state.context;\r\n    if (stream.sol()) {\r\n      if (ctx.align == null) ctx.align = false;\r\n      state.indented = stream.indentation();\r\n      state.startOfLine = true;\r\n    }\r\n    if (stream.eatSpace()) return null;\r\n    curPunc = null;\r\n    var style = (state.tokenize || tokenBase)(stream, state);\r\n    if (style == \"comment\") return style;\r\n    if (ctx.align == null) ctx.align = true;\r\n\r\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\r\n        && ctx.type == \"statement\"){\r\n      popContext(state);\r\n    }\r\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\r\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\r\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\r\n    else if (curPunc == \"}\") {\r\n      while (ctx.type == \"statement\") ctx = popContext(state);\r\n      if (ctx.type == \"}\") ctx = popContext(state);\r\n      while (ctx.type == \"statement\") ctx = popContext(state);\r\n    }\r\n    else if (curPunc == ctx.type) popContext(state);\r\n    else if (indentStatements &&\r\n             (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\r\n              (ctx.type == \"statement\" && curPunc == \"newstatement\")))\r\n      pushContext(state, stream.column(), \"statement\");\r\n\r\n    state.startOfLine = false;\r\n\r\n    return style;\r\n  },\r\n\r\n  languageData: {\r\n    indentOnInput: /^\\s*[{}]$/,\r\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\r\n    autocomplete: wordList\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["words"]
}
